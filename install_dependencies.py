#!/usr/bin/env python3
"""
Script d'installation des d√©pendances pour Alimante
Installe les modules Python n√©cessaires
"""

import subprocess
import sys
import os

def check_python_version():
    """V√©rifie la version de Python"""
    version = sys.version_info
    print(f"üêç Python version: {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 6):
        print("‚ùå Python 3.6+ requis")
        return False
    
    print("‚úÖ Version Python compatible")
    return True

def install_package(package):
    """Installe un package Python"""
    try:
        print(f"üì¶ Installation de {package}...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])
        print(f"‚úÖ {package} install√© avec succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur installation {package}: {e}")
        return False

def check_package(package):
    """V√©rifie si un package est install√©"""
    try:
        __import__(package)
        return True
    except ImportError:
        return False

def install_system_packages():
    """Installe les packages syst√®me n√©cessaires"""
    packages = [
        "python3-dev",
        "python3-pip",
        "i2c-tools",
        "spi-tools"
    ]
    
    print("üîß Installation des packages syst√®me...")
    
    for package in packages:
        try:
            print(f"üì¶ Installation de {package}...")
            subprocess.check_call(["sudo", "apt", "update"])
            subprocess.check_call(["sudo", "apt", "install", "-y", package])
            print(f"‚úÖ {package} install√©")
        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è  Erreur installation {package}: {e}")

def main():
    """Fonction principale"""
    print("=" * 60)
    print("üîß INSTALLATION D√âPENDANCES ALIMANTE")
    print("üì¶ Installation des modules Python n√©cessaires")
    print("=" * 60)
    
    # V√©rification Python
    if not check_python_version():
        return
    
    # Packages Python requis
    python_packages = [
        "RPi.GPIO",
        "spidev",
        "Pillow"  # Pour les images si n√©cessaire
    ]
    
    print("\nüìã V√©rification des packages Python...")
    
    # V√©rifier et installer les packages
    for package in python_packages:
        if check_package(package.replace("-", "_")):
            print(f"‚úÖ {package} d√©j√† install√©")
        else:
            if not install_package(package):
                print(f"‚ùå Impossible d'installer {package}")
    
    # Installation des packages syst√®me
    print("\nüîß Installation des packages syst√®me...")
    try:
        install_system_packages()
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur packages syst√®me: {e}")
    
    # V√©rification finale
    print("\nüîç V√©rification finale...")
    all_ok = True
    
    for package in python_packages:
        if check_package(package.replace("-", "_")):
            print(f"‚úÖ {package}: OK")
        else:
            print(f"‚ùå {package}: MANQUANT")
            all_ok = False
    
    if all_ok:
        print("\nüéâ Toutes les d√©pendances sont install√©es!")
        print("üöÄ Vous pouvez maintenant utiliser les scripts Alimante")
    else:
        print("\n‚ö†Ô∏è  Certaines d√©pendances manquent")
        print("üîß Relancez ce script ou installez manuellement")
    
    print("\nüìö Scripts disponibles:")
    print("   ‚Ä¢ python3 diagnostic_ecran_psi.py")
    print("   ‚Ä¢ python3 test_st7735_azdelivery.py")
    print("   ‚Ä¢ python3 alimante_main.py")

if __name__ == "__main__":
    main()
