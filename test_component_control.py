#!/usr/bin/env python3
"""
Test du contr√¥le des composants via l'API web
"""

import sys
import os
import time
import requests
import json

# Ajouter le r√©pertoire src au path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def test_component_control():
    """Test du contr√¥le des composants"""
    print("üß™ Test du contr√¥le des composants")
    print("=" * 50)
    
    base_url = "http://localhost:8080"
    
    # Test 1: V√©rifier que le serveur est accessible
    print("1. Test de connexion au serveur...")
    try:
        response = requests.get(f"{base_url}/api/status", timeout=5)
        if response.status_code == 200:
            print("   ‚úÖ Serveur web accessible")
        else:
            print(f"   ‚ùå Serveur web inaccessible (code: {response.status_code})")
            return False
    except requests.exceptions.ConnectionError:
        print("   ‚ùå Impossible de se connecter au serveur")
        print("   üí° Assurez-vous que 'python main.py' est en cours d'ex√©cution")
        return False
    except Exception as e:
        print(f"   ‚ùå Erreur de connexion: {e}")
        return False
    
    # Test 2: R√©cup√©rer l'√©tat des composants
    print("\n2. Test r√©cup√©ration √©tat des composants...")
    try:
        response = requests.get(f"{base_url}/api/components", timeout=5)
        if response.status_code == 200:
            data = response.json()
            components = data.get('components', {})
            print(f"   ‚úÖ {len(components)} composants trouv√©s")
            
            for comp_name, comp_data in components.items():
                state = "ON" if comp_data.get('current_state', False) else "OFF"
                mode = comp_data.get('control_mode', 'unknown')
                print(f"      - {comp_name}: {state} (mode: {mode})")
        else:
            print(f"   ‚ùå Erreur r√©cup√©ration composants (code: {response.status_code})")
            return False
    except Exception as e:
        print(f"   ‚ùå Erreur r√©cup√©ration composants: {e}")
        return False
    
    # Test 3: Contr√¥le du chauffage
    print("\n3. Test contr√¥le chauffage...")
    try:
        # Allumer le chauffage
        control_data = {
            "component": "heating",
            "command": {"state": True, "target_temperature": 26.0}
        }
        response = requests.post(f"{base_url}/api/control", json=control_data, timeout=5)
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                print("   ‚úÖ Chauffage allum√© avec succ√®s")
            else:
                print(f"   ‚ùå Erreur contr√¥le chauffage: {result.get('error', 'Inconnu')}")
        else:
            print(f"   ‚ùå Erreur API chauffage (code: {response.status_code})")
            print(f"   üìù R√©ponse: {response.text}")
    except Exception as e:
        print(f"   ‚ùå Erreur contr√¥le chauffage: {e}")
    
    # Test 4: Contr√¥le de l'√©clairage
    print("\n4. Test contr√¥le √©clairage...")
    try:
        control_data = {
            "component": "lighting",
            "command": {"state": True, "brightness": 75}
        }
        response = requests.post(f"{base_url}/api/control", json=control_data, timeout=5)
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                print("   ‚úÖ √âclairage contr√¥l√© avec succ√®s")
            else:
                print(f"   ‚ùå Erreur contr√¥le √©clairage: {result.get('error', 'Inconnu')}")
        else:
            print(f"   ‚ùå Erreur API √©clairage (code: {response.status_code})")
    except Exception as e:
        print(f"   ‚ùå Erreur contr√¥le √©clairage: {e}")
    
    # Test 5: Contr√¥le de l'humidification
    print("\n5. Test contr√¥le humidification...")
    try:
        control_data = {
            "component": "humidification",
            "command": {"state": True, "target_humidity": 65}
        }
        response = requests.post(f"{base_url}/api/control", json=control_data, timeout=5)
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                print("   ‚úÖ Humidification contr√¥l√©e avec succ√®s")
            else:
                print(f"   ‚ùå Erreur contr√¥le humidification: {result.get('error', 'Inconnu')}")
        else:
            print(f"   ‚ùå Erreur API humidification (code: {response.status_code})")
    except Exception as e:
        print(f"   ‚ùå Erreur contr√¥le humidification: {e}")
    
    # Test 6: Contr√¥le de la ventilation
    print("\n6. Test contr√¥le ventilation...")
    try:
        control_data = {
            "component": "ventilation",
            "command": {"state": True, "fan_speed": 60}
        }
        response = requests.post(f"{base_url}/api/control", json=control_data, timeout=5)
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                print("   ‚úÖ Ventilation contr√¥l√©e avec succ√®s")
            else:
                print(f"   ‚ùå Erreur contr√¥le ventilation: {result.get('error', 'Inconnu')}")
        else:
            print(f"   ‚ùå Erreur API ventilation (code: {response.status_code})")
    except Exception as e:
        print(f"   ‚ùå Erreur contr√¥le ventilation: {e}")
    
    # Test 7: Contr√¥le de l'alimentation
    print("\n7. Test contr√¥le alimentation...")
    try:
        control_data = {
            "component": "feeding",
            "command": {"feed": True}
        }
        response = requests.post(f"{base_url}/api/control", json=control_data, timeout=5)
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                print("   ‚úÖ Alimentation contr√¥l√©e avec succ√®s")
            else:
                print(f"   ‚ùå Erreur contr√¥le alimentation: {result.get('error', 'Inconnu')}")
        else:
            print(f"   ‚ùå Erreur API alimentation (code: {response.status_code})")
    except Exception as e:
        print(f"   ‚ùå Erreur contr√¥le alimentation: {e}")
    
    # Test 8: V√©rifier l'√©tat apr√®s les contr√¥les
    print("\n8. V√©rification √©tat final des composants...")
    try:
        response = requests.get(f"{base_url}/api/components", timeout=5)
        if response.status_code == 200:
            data = response.json()
            components = data.get('components', {})
            print("   üìä √âtat final des composants:")
            
            for comp_name, comp_data in components.items():
                state = "ON" if comp_data.get('current_state', False) else "OFF"
                mode = comp_data.get('control_mode', 'unknown')
                
                # Afficher des d√©tails selon le composant
                if comp_name == 'heating':
                    temp = comp_data.get('target_temperature', 'N/A')
                    print(f"      - {comp_name}: {state} (temp√©rature cible: {temp}¬∞C)")
                elif comp_name == 'lighting':
                    brightness = comp_data.get('brightness', 'N/A')
                    print(f"      - {comp_name}: {state} (luminosit√©: {brightness}%)")
                elif comp_name == 'humidification':
                    humidity = comp_data.get('target_humidity', 'N/A')
                    print(f"      - {comp_name}: {state} (humidit√© cible: {humidity}%)")
                elif comp_name == 'ventilation':
                    speed = comp_data.get('fan_speed', 'N/A')
                    print(f"      - {comp_name}: {state} (vitesse: {speed}%)")
                elif comp_name == 'feeding':
                    feeds = comp_data.get('daily_feeds', 0)
                    max_feeds = comp_data.get('max_daily_feeds', 0)
                    print(f"      - {comp_name}: {state} (alimentations: {feeds}/{max_feeds})")
                else:
                    print(f"      - {comp_name}: {state}")
        else:
            print(f"   ‚ùå Erreur r√©cup√©ration √©tat final (code: {response.status_code})")
    except Exception as e:
        print(f"   ‚ùå Erreur v√©rification √©tat final: {e}")
    
    print("\nüéâ Tests de contr√¥le des composants termin√©s!")
    return True

if __name__ == "__main__":
    print("üí° Assurez-vous que 'python main.py' est en cours d'ex√©cution")
    print("   Puis lancez ce test pour v√©rifier le contr√¥le des composants\n")
    
    test_component_control()
