#!/usr/bin/env python3
"""
Script pour activer l'interface SPI sur Raspberry Pi
N√©cessite les droits administrateur
"""

import subprocess
import sys
import os

def check_sudo():
    """V√©rifie si le script est ex√©cut√© avec sudo"""
    if os.geteuid() != 0:
        print("‚ùå Ce script doit √™tre ex√©cut√© avec sudo")
        print("Usage: sudo python3 activate_spi.py")
        return False
    return True

def check_raspi_config():
    """V√©rifie si raspi-config est disponible"""
    try:
        result = subprocess.run(['which', 'raspi-config'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ raspi-config trouv√©")
            return True
        else:
            print("‚ùå raspi-config non trouv√©")
            return False
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def activate_spi_raspi_config():
    """Active SPI avec raspi-config"""
    print("üîÑ Activation de SPI avec raspi-config...")
    try:
        # Commande pour activer SPI automatiquement
        cmd = ['raspi-config', 'nonint', 'do_spi', '0']
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ SPI activ√© avec raspi-config")
            return True
        else:
            print(f"‚ùå Erreur raspi-config: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def activate_spi_manual():
    """Active SPI manuellement en modifiant /boot/config.txt"""
    print("üîÑ Activation manuelle de SPI...")
    
    config_file = '/boot/config.txt'
    backup_file = '/boot/config.txt.backup'
    
    try:
        # Sauvegarde du fichier original
        subprocess.run(['cp', config_file, backup_file], check=True)
        print(f"‚úÖ Sauvegarde cr√©√©e: {backup_file}")
        
        # Lecture du fichier
        with open(config_file, 'r') as f:
            lines = f.readlines()
        
        # V√©rification si SPI est d√©j√† activ√©
        spi_enabled = False
        for line in lines:
            if 'dtparam=spi=on' in line and not line.strip().startswith('#'):
                spi_enabled = True
                break
        
        if spi_enabled:
            print("‚úÖ SPI d√©j√† activ√© dans /boot/config.txt")
            return True
        
        # Ajout de la configuration SPI
        spi_config = [
            '\n',
            '# SPI interface activation for PSI display\n',
            'dtparam=spi=on\n',
            'dtoverlay=spi1-1cs\n'
        ]
        
        with open(config_file, 'a') as f:
            f.writelines(spi_config)
        
        print("‚úÖ Configuration SPI ajout√©e √† /boot/config.txt")
        print("‚ö†Ô∏è  Red√©marrage n√©cessaire pour appliquer les changements")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def check_spi_status():
    """V√©rifie le statut de SPI"""
    print("üîç V√©rification du statut SPI...")
    
    # V√©rifier /boot/config.txt
    try:
        with open('/boot/config.txt', 'r') as f:
            content = f.read()
            if 'dtparam=spi=on' in content:
                print("‚úÖ SPI activ√© dans /boot/config.txt")
            else:
                print("‚ùå SPI non activ√© dans /boot/config.txt")
                return False
    except Exception as e:
        print(f"‚ùå Erreur lecture config: {e}")
        return False
    
    # V√©rifier les p√©riph√©riques
    if os.path.exists('/dev/spidev0.0'):
        print("‚úÖ P√©riph√©rique SPI trouv√© (/dev/spidev0.0)")
    else:
        print("‚ùå P√©riph√©rique SPI non trouv√©")
        return False
    
    return True

def main():
    """Fonction principale"""
    print("=" * 60)
    print("üîß ACTIVATION INTERFACE SPI")
    print("üñ•Ô∏è  Pour √©cran PSI Alimante")
    print("=" * 60)
    
    # V√©rification des droits
    if not check_sudo():
        sys.exit(1)
    
    # V√©rification du statut actuel
    if check_spi_status():
        print("‚úÖ SPI d√©j√† activ√© et fonctionnel!")
        return
    
    print("\nüîÑ Activation de SPI...")
    
    # Tentative avec raspi-config
    if check_raspi_config():
        if activate_spi_raspi_config():
            print("\n‚úÖ SPI activ√© avec raspi-config")
            print("‚ö†Ô∏è  Red√©marrez le Raspberry Pi pour appliquer les changements")
            print("   sudo reboot")
            return
    
    # Activation manuelle
    print("\nüîÑ Tentative d'activation manuelle...")
    if activate_spi_manual():
        print("\n‚úÖ SPI activ√© manuellement")
        print("‚ö†Ô∏è  Red√©marrez le Raspberry Pi pour appliquer les changements")
        print("   sudo reboot")
    else:
        print("\n‚ùå Impossible d'activer SPI automatiquement")
        print("üîß Activation manuelle requise:")
        print("   1. sudo nano /boot/config.txt")
        print("   2. Ajouter: dtparam=spi=on")
        print("   3. Sauvegarder et red√©marrer")

if __name__ == "__main__":
    main()
