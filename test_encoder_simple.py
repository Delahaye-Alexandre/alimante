#!/usr/bin/env python3
"""
Test simple pour l'encodeur rotatif sans interruptions
Utilise une approche de polling pour √©viter les conflits GPIO
"""

import RPi.GPIO as GPIO
import time
import sys
import signal
from config_alimante import get_gpio_config, get_test_config

class EncoderTestSimple:
    def __init__(self):
        """Initialise le test de l'encodeur rotatif"""
        self.config = get_gpio_config()
        self.test_config = get_test_config()
        
        # Configuration des pins
        self.clk_pin = self.config['ENCODER']['CLK_PIN']
        self.dt_pin = self.config['ENCODER']['DT_PIN']
        self.sw_pin = self.config['ENCODER']['SW_PIN']
        
        # Variables d'√©tat
        self.counter = 0
        self.last_clk_state = 0
        self.last_dt_state = 0
        self.last_sw_state = 0
        self.sw_pressed = False
        self.sw_press_time = 0
        self.is_running = False
        
        # Param√®tres d'anti-rebond am√©lior√©s
        self.encoder_debounce_ms = 5  # 5ms pour l'encodeur
        self.button_debounce_ms = 10  # 10ms pour le bouton
        
        # Variables d'anti-rebond non-bloquant
        self.clk_debounce_time = 0
        self.sw_debounce_time = 0
        self.clk_pending_state = None
        self.sw_pending_state = None
        
        # Configuration GPIO
        GPIO.setmode(GPIO.BCM)
        GPIO.setwarnings(False)
        
        # Gestionnaire de signal pour arr√™t propre
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def initialize(self):
        """Initialise les pins GPIO de l'encodeur"""
        try:
            # Nettoyage pr√©alable
            GPIO.cleanup()
            time.sleep(0.1)
            
            # Configuration des pins d'entr√©e avec pull-up interne
            GPIO.setup(self.clk_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)
            GPIO.setup(self.dt_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)
            GPIO.setup(self.sw_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)
            
            # Lecture de l'√©tat initial
            self.last_clk_state = GPIO.input(self.clk_pin)
            self.last_sw_state = GPIO.input(self.sw_pin)
            
            self.is_running = True
            print("‚úÖ Encodeur rotatif initialis√© (mode polling)")
            print(f"   üìå CLK: GPIO {self.clk_pin}")
            print(f"   üìå DT:  GPIO {self.dt_pin}")
            print(f"   üìå SW:  GPIO {self.sw_pin}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'initialisation: {e}")
            return False
    
    def check_rotation(self):
        """V√©rifie la rotation de l'encodeur (polling + anti-rebond non-bloquant)"""
        if not self.is_running:
            return
            
        current_time = time.time()
        clk_state = GPIO.input(self.clk_pin)
        dt_state = GPIO.input(self.dt_pin)
        
        # D√©tection du changement d'√©tat sur CLK
        if clk_state != self.last_clk_state:
            # Si pas de changement en attente, d√©marrer l'anti-rebond
            if self.clk_pending_state is None:
                self.clk_pending_state = clk_state
                self.clk_debounce_time = current_time
            # Si changement diff√©rent en attente, r√©initialiser
            elif self.clk_pending_state != clk_state:
                self.clk_pending_state = clk_state
                self.clk_debounce_time = current_time
        
        # V√©rifier si l'anti-rebond est termin√©
        if (self.clk_pending_state is not None and 
            current_time - self.clk_debounce_time >= self.encoder_debounce_ms / 1000.0):
            
            # Relire l'√©tat actuel pour v√©rifier la stabilit√©
            clk_state_now = GPIO.input(self.clk_pin)
            dt_state_now = GPIO.input(self.dt_pin)
            
            # Si l'√©tat est stable et diff√©rent du dernier √©tat enregistr√©
            if (clk_state_now == self.clk_pending_state and 
                clk_state_now != self.last_clk_state):
                
                # D√©tection de la direction
                if dt_state_now != clk_state_now:
                    self.counter += 1
                    direction = "üîÑ HORAIRE"
                else:
                    self.counter -= 1
                    direction = "üîÑ ANTI-HORAIRE"
                
                print(f"{direction} | Compteur: {self.counter}")
                self.last_clk_state = clk_state_now
            
            # R√©initialiser l'anti-rebond
            self.clk_pending_state = None

    def check_button(self):
        """V√©rifie l'√©tat du bouton (polling + anti-rebond non-bloquant)"""
        if not self.is_running:
            return
            
        current_time = time.time()
        sw_state = GPIO.input(self.sw_pin)
        
        # D√©tection de l'appui (transition HIGH -> LOW)
        if sw_state == 0 and self.last_sw_state == 1:
            # Si pas de changement en attente, d√©marrer l'anti-rebond
            if self.sw_pending_state is None:
                self.sw_pending_state = 0
                self.sw_debounce_time = current_time
        
        # D√©tection du rel√¢chement (transition LOW -> HIGH)
        elif sw_state == 1 and self.last_sw_state == 0:
            # Si pas de changement en attente, d√©marrer l'anti-rebond
            if self.sw_pending_state is None:
                self.sw_pending_state = 1
                self.sw_debounce_time = current_time
        
        # V√©rifier si l'anti-rebond est termin√©
        if (self.sw_pending_state is not None and 
            current_time - self.sw_debounce_time >= self.button_debounce_ms / 1000.0):
            
            # Relire l'√©tat actuel pour v√©rifier la stabilit√©
            sw_state_now = GPIO.input(self.sw_pin)
            
            # Si l'√©tat est stable et diff√©rent du dernier √©tat enregistr√©
            if (sw_state_now == self.sw_pending_state and 
                sw_state_now != self.last_sw_state):
                
                if sw_state_now == 0:  # Appui confirm√©
                    self.sw_pressed = True
                    self.sw_press_time = current_time
                    print("üîò BOUTON APPUY√â")
                elif sw_state_now == 1 and self.sw_pressed:  # Rel√¢chement confirm√©
                    press_duration = current_time - self.sw_press_time
                    print(f"üîò BOUTON REL√ÇCH√â (dur√©e: {press_duration:.2f}s)")
                    
                    # Classification du type d'appui
                    if press_duration < 0.5:
                        print("   ‚Üí Clic court")
                    elif press_duration < 2.0:
                        print("   ‚Üí Clic long")
                    else:
                        print("   ‚Üí Appui tr√®s long")
                    
                    self.sw_pressed = False
                
                self.last_sw_state = sw_state_now
            
            # R√©initialiser l'anti-rebond
            self.sw_pending_state = None
    
    def test_rotation(self, duration=10):
        """Test de rotation pendant une dur√©e donn√©e"""
        print(f"üîÑ Test de rotation pendant {duration} secondes...")
        print("   ‚Üí Tournez l'encodeur dans les deux sens")
        print("   ‚Üí Appuyez sur le bouton")
        print("   ‚Üí Appuyez sur Ctrl+C pour arr√™ter")
        
        start_time = time.time()
        initial_counter = self.counter
        
        try:
            while time.time() - start_time < duration:
                self.check_rotation()
                self.check_button()
                time.sleep(0.01)  # Polling √† 100Hz
                
        except KeyboardInterrupt:
            print("\nüõë Test interrompu par l'utilisateur")
        
        final_counter = self.counter
        total_rotations = final_counter - initial_counter
        print(f"‚úÖ Test termin√©")
        print(f"   ‚Üí Rotations totales: {total_rotations}")
        print(f"   ‚Üí Compteur final: {self.counter}")
    
    def test_button_sequence(self):
        """Test de s√©quence de boutons"""
        print("üîò Test de s√©quence de boutons...")
        print("   ‚Üí Appuyez sur le bouton selon les instructions")
        print("   ‚Üí Appuyez sur Ctrl+C pour arr√™ter")
        
        sequences = [
            ("1 clic court", 1, 0.5),
            ("1 clic long", 1, 1.5),
            ("2 clics courts", 2, 0.3),
            ("3 clics rapides", 3, 0.2)
        ]
        
        for description, count, max_duration in sequences:
            print(f"\nüìã {description} (max {max_duration}s par clic)")
            input("   ‚Üí Appuyez sur Entr√©e quand pr√™t...")
            
            clics_detected = 0
            start_time = time.time()
            
            while clics_detected < count and (time.time() - start_time) < 10:
                self.check_button()
                if self.sw_pressed:
                    clics_detected += 1
                    print(f"   Clic {clics_detected}/{count} d√©tect√©")
                    # Attendre le rel√¢chement
                    while self.sw_pressed:
                        self.check_button()
                        time.sleep(0.01)
                    time.sleep(0.1)  # Petite pause entre les clics
                time.sleep(0.01)
            
            if clics_detected == count:
                print(f"   ‚úÖ {description} r√©ussi!")
            else:
                print(f"   ‚ùå {description} √©chou√© ({clics_detected}/{count})")
    
    def test_encoder_precision(self, rotations=10):
        """Test de pr√©cision de l'encodeur"""
        print(f"üéØ Test de pr√©cision ({rotations} rotations)...")
        print("   ‚Üí Effectuez exactement 10 rotations horaires")
        print("   ‚Üí Puis 10 rotations anti-horaires")
        print("   ‚Üí Appuyez sur Entr√©e pour commencer...")
        input()
        
        initial_counter = self.counter
        print(f"   Compteur initial: {initial_counter}")
        
        # Test rotations horaires
        print("\n   üîÑ Rotations horaires (10 tours)...")
        input("   ‚Üí Appuyez sur Entr√©e quand termin√©...")
        horaire_counter = self.counter
        
        # Test rotations anti-horaires
        print("\n   üîÑ Rotations anti-horaires (10 tours)...")
        input("   ‚Üí Appuyez sur Entr√©e quand termin√©...")
        final_counter = self.counter
        
        # Calcul des r√©sultats
        horaire_rotations = horaire_counter - initial_counter
        anti_horaire_rotations = final_counter - horaire_counter
        total_rotations = final_counter - initial_counter
        
        print(f"\nüìä R√©sultats du test de pr√©cision:")
        print(f"   ‚Üí Rotations horaires: {horaire_rotations}")
        print(f"   ‚Üí Rotations anti-horaires: {anti_horaire_rotations}")
        print(f"   ‚Üí Total: {total_rotations}")
        print(f"   ‚Üí Pr√©cision: {abs(total_rotations)} rotations d√©tect√©es")
        
        if abs(total_rotations) <= 2:  # Tol√©rance de ¬±2
            print("   ‚úÖ Pr√©cision excellente!")
        elif abs(total_rotations) <= 5:
            print("   ‚ö†Ô∏è  Pr√©cision correcte")
        else:
            print("   ‚ùå Probl√®me de pr√©cision d√©tect√©")
    
    def monitor_realtime(self):
        """Monitoring en temps r√©el"""
        print("üìä Monitoring en temps r√©el")
        print("   ‚Üí Tournez l'encodeur et appuyez sur le bouton")
        print("   ‚Üí Appuyez sur Ctrl+C pour arr√™ter")
        
        try:
            while True:
                self.check_rotation()
                self.check_button()
                time.sleep(0.01)
        except KeyboardInterrupt:
            print("\nüõë Monitoring arr√™t√©")
    
    def reset_debounce_states(self):
        """R√©initialise les √©tats d'anti-rebond"""
        self.clk_pending_state = None
        self.sw_pending_state = None
        self.clk_debounce_time = 0
        self.sw_debounce_time = 0

    def adjust_debounce(self):
        """Ajuste les param√®tres d'anti-rebond"""
        print("\nüîß AJUSTEMENT ANTI-REBOND")
        print("=" * 40)
        print(f"Param√®tres actuels:")
        print(f"  ‚Ä¢ Encodeur: {self.encoder_debounce_ms}ms")
        print(f"  ‚Ä¢ Bouton: {self.button_debounce_ms}ms")
        print()
        print("Valeurs recommand√©es:")
        print("  ‚Ä¢ Encodeur: 5-20ms (plus bas = plus sensible)")
        print("  ‚Ä¢ Bouton: 10-30ms (plus bas = plus sensible)")
        print()
        print("üí° Si probl√®me de rebond persiste:")
        print("  ‚Ä¢ Augmentez les valeurs (plus stable)")
        print("  ‚Ä¢ V√©rifiez les connexions")
        print("  ‚Ä¢ Testez avec option 4 (monitoring)")
        print()
        
        try:
            # Ajuster l'anti-rebond de l'encodeur
            new_encoder_ms = input(f"Anti-rebond encodeur en ms (actuel: {self.encoder_debounce_ms}): ").strip()
            if new_encoder_ms:
                self.encoder_debounce_ms = max(5, min(100, int(new_encoder_ms)))
                print(f"‚úÖ Encodeur: {self.encoder_debounce_ms}ms")
            
            # Ajuster l'anti-rebond du bouton
            new_button_ms = input(f"Anti-rebond bouton en ms (actuel: {self.button_debounce_ms}): ").strip()
            if new_button_ms:
                self.button_debounce_ms = max(5, min(200, int(new_button_ms)))
                print(f"‚úÖ Bouton: {self.button_debounce_ms}ms")
            
            # R√©initialiser les √©tats d'anti-rebond
            self.reset_debounce_states()
            
            print(f"\nüìä Nouveaux param√®tres:")
            print(f"  ‚Ä¢ Encodeur: {self.encoder_debounce_ms}ms")
            print(f"  ‚Ä¢ Bouton: {self.button_debounce_ms}ms")
            print("‚úÖ √âtats d'anti-rebond r√©initialis√©s")
            print("Les nouveaux param√®tres sont actifs imm√©diatement!")
            
        except ValueError:
            print("‚ùå Valeur invalide, param√®tres inchang√©s")
        except Exception as e:
            print(f"‚ùå Erreur: {e}")

    def diagnostic_debounce(self):
        """Diagnostic en temps r√©el de l'anti-rebond"""
        print("\nüîç DIAGNOSTIC ANTI-REBOND")
        print("=" * 50)
        print("Affichage des √©tats bruts et de l'anti-rebond")
        print("Appuyez sur Ctrl+C pour arr√™ter")
        print()
        
        # R√©initialiser les √©tats
        self.reset_debounce_states()
        self.last_clk_state = GPIO.input(self.clk_pin)
        self.last_sw_state = GPIO.input(self.sw_pin)
        
        try:
            while True:
                current_time = time.time()
                clk_state = GPIO.input(self.clk_pin)
                dt_state = GPIO.input(self.dt_pin)
                sw_state = GPIO.input(self.sw_pin)
                
                # Affichage des √©tats bruts
                clk_change = "üî¥" if clk_state != self.last_clk_state else "‚ö™"
                dt_change = "üî¥" if dt_state != self.last_dt_state else "‚ö™"
                sw_change = "üî¥" if sw_state != self.last_sw_state else "‚ö™"
                
                # Affichage des √©tats d'anti-rebond
                clk_pending = "‚è≥" if self.clk_pending_state is not None else "‚ö™"
                sw_pending = "‚è≥" if self.sw_pending_state is not None else "‚ö™"
                
                print(f"\rCLK:{clk_state}{clk_change} DT:{dt_state}{dt_change} SW:{sw_state}{sw_change} | "
                      f"CLK_P:{clk_pending} SW_P:{sw_pending} | C:{self.counter}", end="", flush=True)
                
                # V√©rifier la rotation
                self.check_rotation()
                self.check_button()
                
                # Mettre √† jour les √©tats de r√©f√©rence
                self.last_dt_state = dt_state
                
                time.sleep(0.001)  # 1ms pour diagnostic pr√©cis
                
        except KeyboardInterrupt:
            print("\nüõë Diagnostic arr√™t√©")
        except Exception as e:
            print(f"\n‚ùå Erreur diagnostic: {e}")

    def cleanup(self):
        """Nettoie les ressources GPIO"""
        self.is_running = False
        GPIO.cleanup()
        print("üßπ Ressources GPIO nettoy√©es")
    
    def _signal_handler(self, signum, frame):
        """Gestionnaire de signal pour arr√™t propre"""
        print("\nüõë Arr√™t du programme...")
        self.cleanup()
        sys.exit(0)

def main():
    """Fonction principale de test"""
    print("=" * 60)
    print("üîß TEST ENCODEUR ROTATIF SIMPLE - Alimante")
    print("üìç Configuration bas√©e sur config_alimante.py")
    print("üìç Mode polling (sans interruptions)")
    print("=" * 60)
    
    # Cr√©ation du testeur
    encoder_test = EncoderTestSimple()
    
    try:
        # Initialisation
        if not encoder_test.initialize():
            print("‚ùå Impossible d'initialiser l'encodeur")
            return
        
        # Menu interactif
        while True:
            print("\n" + "=" * 40)
            print("MENU DE TEST ENCODEUR:")
            print("1. Test de rotation (10s)")
            print("2. Test de s√©quence de boutons")
            print("3. Test de pr√©cision")
            print("4. Monitoring temps r√©el")
            print("5. Test personnalis√©")
            print("6. Afficher configuration")
            print("7. Ajuster anti-rebond")
            print("8. Diagnostic anti-rebond")
            print("0. Quitter")
            print("=" * 40)
            
            choice = input("Votre choix (0-8): ").strip()
            
            if choice == "0":
                break
            elif choice == "1":
                try:
                    duration = int(input("Dur√©e du test en secondes (d√©faut 10): ") or "10")
                    encoder_test.test_rotation(duration)
                except ValueError:
                    encoder_test.test_rotation()
            elif choice == "2":
                encoder_test.test_button_sequence()
            elif choice == "3":
                try:
                    rotations = int(input("Nombre de rotations (d√©faut 10): ") or "10")
                    encoder_test.test_encoder_precision(rotations)
                except ValueError:
                    encoder_test.test_encoder_precision()
            elif choice == "4":
                encoder_test.monitor_realtime()
            elif choice == "5":
                print("Test personnalis√© - monitoring continu")
                print("Appuyez sur Ctrl+C pour arr√™ter")
                encoder_test.monitor_realtime()
            elif choice == "6":
                from config_alimante import print_config
                print_config()
            elif choice == "7":
                encoder_test.adjust_debounce()
            elif choice == "8":
                encoder_test.diagnostic_debounce()
            else:
                print("‚ùå Choix invalide")
    
    except KeyboardInterrupt:
        print("\nüõë Arr√™t par l'utilisateur")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    finally:
        # Nettoyage
        encoder_test.cleanup()
        print("üëã Test termin√©!")

if __name__ == "__main__":
    main()
