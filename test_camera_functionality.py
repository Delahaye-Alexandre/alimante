#!/usr/bin/env python3
"""
Test des fonctionnalit√©s de cam√©ra et streaming Alimante
V√©rifie que tous les services de cam√©ra fonctionnent correctement
"""

import sys
import os
import time
from pathlib import Path

# Ajouter le r√©pertoire src au path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from services import (
    CameraService,
    StreamingService,
    SnapshotService,
    AlertService,
    StreamFormat,
    StreamQuality,
    SnapshotType,
    AlertSeverity,
    AlertStatus
)

def test_camera_service():
    """Test du service de cam√©ra"""
    print("üì∑ TEST DU SERVICE DE CAM√âRA")
    print("=" * 50)
    
    try:
        # Configuration
        config = {
            'camera': {
                'capture_interval': 10,
                'capture_path': 'data/test_captures',
                'max_captures': 10,
                'quality': 80,
                'motion_threshold': 0.1,
                'motion_sensitivity': 0.5
            }
        }
        
        # Initialiser le service
        camera = CameraService(config)
        
        if not camera.initialize():
            print("‚ùå √âchec initialisation service cam√©ra")
            return False
        
        print("‚úÖ Service cam√©ra initialis√©")
        
        # Test de d√©marrage
        if camera.start():
            print("‚úÖ Service cam√©ra d√©marr√©")
        else:
            print("‚ùå √âchec d√©marrage service cam√©ra")
            return False
        
        # Test de capture d'image
        if camera.capture_image("test"):
            print("‚úÖ Capture d'image r√©ussie")
        else:
            print("‚ùå √âchec capture d'image")
            return False
        
        # Test de d√©tection de mouvement
        if camera.start_motion_detection(0.1):
            print("‚úÖ D√©tection de mouvement activ√©e")
        else:
            print("‚ùå √âchec activation d√©tection mouvement")
            return False
        
        if camera.stop_motion_detection():
            print("‚úÖ D√©tection de mouvement d√©sactiv√©e")
        else:
            print("‚ùå √âchec d√©sactivation d√©tection mouvement")
            return False
        
        # Test du statut
        status = camera.get_status()
        print(f"‚úÖ Statut: {status['is_running']}")
        print(f"‚úÖ Captures: {status['capture_count']}")
        
        # Nettoyage
        camera.cleanup()
        print("‚úÖ Service cam√©ra nettoy√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test service cam√©ra: {e}")
        return False

def test_streaming_service():
    """Test du service de streaming"""
    print("\nüì∫ TEST DU SERVICE DE STREAMING")
    print("=" * 50)
    
    try:
        # Configuration
        config = {
            'streaming': {
                'enabled': True,
                'port': 8081,  # Port diff√©rent pour √©viter les conflits
                'host': '127.0.0.1',
                'max_clients': 5,
                'width': 640,
                'height': 480,
                'fps': 30,
                'quality': 80,
                'format': 'mjpeg',
                'recording_path': 'data/test_recordings',
                'recording_duration': 60
            }
        }
        
        # Initialiser le service
        streaming = StreamingService(config)
        
        if not streaming.initialize():
            print("‚ùå √âchec initialisation service streaming")
            return False
        
        print("‚úÖ Service streaming initialis√©")
        
        # Test de d√©marrage
        if streaming.start():
            print("‚úÖ Service streaming d√©marr√©")
        else:
            print("‚ùå √âchec d√©marrage service streaming")
            return False
        
        # Test d'enregistrement
        if streaming.start_recording():
            print("‚úÖ Enregistrement d√©marr√©")
        else:
            print("‚ùå √âchec d√©marrage enregistrement")
            return False
        
        # Attendre un peu
        time.sleep(2)
        
        if streaming.stop_recording():
            print("‚úÖ Enregistrement arr√™t√©")
        else:
            print("‚ùå √âchec arr√™t enregistrement")
            return False
        
        # Test du statut
        status = streaming.get_status()
        print(f"‚úÖ Statut: {status['is_running']}")
        print(f"‚úÖ URL: {status['stream_url']}")
        print(f"‚úÖ Clients: {status['clients_connected']}")
        
        # Nettoyage
        streaming.cleanup()
        print("‚úÖ Service streaming nettoy√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test service streaming: {e}")
        return False

def test_snapshot_service():
    """Test du service de snapshots"""
    print("\nüì∏ TEST DU SERVICE DE SNAPSHOTS")
    print("=" * 50)
    
    try:
        # Configuration
        config = {
            'snapshots': {
                'enabled': True,
                'storage_path': 'data/test_snapshots',
                'max_snapshots': 10,
                'retention_days': 7,
                'width': 640,
                'height': 480,
                'quality': 90,
                'format': 'jpg',
                'annotate': True,
                'show_timestamp': True,
                'show_sensors': True,
                'show_terrarium': True
            }
        }
        
        # Initialiser le service
        snapshots = SnapshotService(config)
        
        if not snapshots.initialize():
            print("‚ùå √âchec initialisation service snapshots")
            return False
        
        print("‚úÖ Service snapshots initialis√©")
        
        # Test de d√©marrage
        if snapshots.start():
            print("‚úÖ Service snapshots d√©marr√©")
        else:
            print("‚ùå √âchec d√©marrage service snapshots")
            return False
        
        # Test de prise de snapshot manuel
        metadata = {
            'terrarium': 'test_terrarium',
            'sensors': {
                'temperature': 25.5,
                'humidity': 60.0
            },
            'systems': {
                'heating': True,
                'lighting': False
            }
        }
        
        snapshot_path = snapshots.take_snapshot(
            SnapshotType.MANUAL,
            annotate=True,
            metadata=metadata
        )
        
        if snapshot_path:
            print(f"‚úÖ Snapshot manuel pris: {snapshot_path}")
        else:
            print("‚ùå √âchec prise snapshot manuel")
            return False
        
        # Test de prise de snapshot de mouvement
        snapshot_path = snapshots.take_snapshot(
            SnapshotType.MOTION,
            annotate=True,
            metadata=metadata
        )
        
        if snapshot_path:
            print(f"‚úÖ Snapshot mouvement pris: {snapshot_path}")
        else:
            print("‚ùå √âchec prise snapshot mouvement")
            return False
        
        # Test de r√©cup√©ration des snapshots
        latest_snapshots = snapshots.get_latest_snapshots(5)
        print(f"‚úÖ Snapshots r√©cup√©r√©s: {len(latest_snapshots)}")
        
        # Test des informations de stockage
        storage_info = snapshots.get_storage_info()
        print(f"‚úÖ Fichiers stock√©s: {storage_info['total_files']}")
        print(f"‚úÖ Taille: {storage_info['total_size_mb']:.2f} MB")
        
        # Test du statut
        status = snapshots.get_status()
        print(f"‚úÖ Statut: {status['is_running']}")
        print(f"‚úÖ Snapshots: {status['snapshot_count']}")
        
        # Nettoyage
        snapshots.cleanup()
        print("‚úÖ Service snapshots nettoy√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test service snapshots: {e}")
        return False

def test_alert_service():
    """Test du service d'alertes"""
    print("\nüö® TEST DU SERVICE D'ALERTES")
    print("=" * 50)
    
    try:
        # Configuration
        config = {
            'alerts': {
                'enabled': True,
                'max_alerts': 100,
                'retention_days': 7,
                'auto_acknowledge_delay': 300,
                'notifications_enabled': True,
                'email_enabled': False,
                'sms_enabled': False,
                'webhook_enabled': False
            }
        }
        
        # Initialiser le service
        alerts = AlertService(config)
        
        if not alerts.initialize():
            print("‚ùå √âchec initialisation service alertes")
            return False
        
        print("‚úÖ Service alertes initialis√©")
        
        # Test de d√©marrage
        if alerts.start():
            print("‚úÖ Service alertes d√©marr√©")
        else:
            print("‚ùå √âchec d√©marrage service alertes")
            return False
        
        # Test de cr√©ation d'alerte info
        alert_id = alerts.create_alert(
            "TEMP_HIGH",
            "Temp√©rature √©lev√©e d√©tect√©e",
            AlertSeverity.INFO,
            terrarium_id="test_terrarium",
            component="heating",
            value=30.5,
            threshold=30.0
        )
        
        if alert_id:
            print(f"‚úÖ Alerte info cr√©√©e: {alert_id}")
        else:
            print("‚ùå √âchec cr√©ation alerte info")
            return False
        
        # Test de cr√©ation d'alerte critique
        alert_id_critical = alerts.create_alert(
            "SENSOR_FAIL",
            "Capteur de temp√©rature d√©faillant",
            AlertSeverity.CRITICAL,
            terrarium_id="test_terrarium",
            component="temperature_sensor"
        )
        
        if alert_id_critical:
            print(f"‚úÖ Alerte critique cr√©√©e: {alert_id_critical}")
        else:
            print("‚ùå √âchec cr√©ation alerte critique")
            return False
        
        # Test d'accus√© r√©ception
        if alerts.acknowledge_alert(alert_id, "test_user"):
            print("‚úÖ Alerte accus√©e")
        else:
            print("‚ùå √âchec accus√© r√©ception alerte")
            return False
        
        # Test de r√©solution
        if alerts.resolve_alert(alert_id, "test_user"):
            print("‚úÖ Alerte r√©solue")
        else:
            print("‚ùå √âchec r√©solution alerte")
            return False
        
        # Test de r√©cup√©ration des alertes
        active_alerts = alerts.get_alerts(AlertStatus.ACTIVE)
        print(f"‚úÖ Alertes actives: {len(active_alerts)}")
        
        critical_alerts = alerts.get_alerts(severity=AlertSeverity.CRITICAL)
        print(f"‚úÖ Alertes critiques: {len(critical_alerts)}")
        
        # Test du statut
        status = alerts.get_status()
        print(f"‚úÖ Statut: {status['is_running']}")
        print(f"‚úÖ Total alertes: {status['total_alerts']}")
        print(f"‚úÖ Alertes actives: {status['active_alerts']}")
        print(f"‚úÖ Alertes critiques: {status['critical_alerts']}")
        
        # Nettoyage
        alerts.cleanup()
        print("‚úÖ Service alertes nettoy√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test service alertes: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üß™ TEST DES FONCTIONNALIT√âS DE CAM√âRA ET STREAMING")
    print("=" * 70)
    
    tests = [
        test_camera_service,
        test_streaming_service,
        test_snapshot_service,
        test_alert_service
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print()  # Ligne vide entre les tests
    
    print("üìä R√âSULTATS DES TESTS")
    print("=" * 30)
    print(f"Tests r√©ussis: {passed}/{total}")
    
    if passed == total:
        print("üéâ TOUS LES TESTS R√âUSSIS !")
        print("Les fonctionnalit√©s de cam√©ra et streaming fonctionnent correctement.")
        return True
    else:
        print("‚ùå CERTAINS TESTS ONT √âCHOU√â")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
