#!/usr/bin/env python3
"""
Test des contr√¥leurs Alimante sur Raspberry Pi
Valide le fonctionnement avec le mat√©riel r√©el
"""

import sys
import time
import json
import logging
from pathlib import Path

# Ajouter le r√©pertoire parent au path pour acc√©der √† src
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.controllers import MainController, ControllerConfig

def load_config_files():
    """Charge tous les fichiers de configuration"""
    config_dir = Path("config")
    config_files = {}
    
    try:
        # Charger gpio_config.json
        with open(config_dir / "gpio_config.json", "r") as f:
            config_files["gpio_config"] = json.load(f)
        
        # Charger safety_limits.json
        with open(config_dir / "safety_limits.json", "r") as f:
            config_files["safety_limits"] = json.load(f)
        
        # Charger les politiques
        policies = {}
        policies_dir = config_dir / "policies"
        for policy_file in policies_dir.glob("*.json"):
            with open(policy_file, "r") as f:
                policies[policy_file.stem] = json.load(f)
        config_files["policies"] = policies
        
        # Charger terrarium_default.json
        with open(config_dir / "terrariums" / "terrarium_default.json", "r") as f:
            config_files["terrarium_config"] = json.load(f)
        
        return config_files
        
    except Exception as e:
        print(f"‚ùå Erreur chargement configuration: {e}")
        return None

def test_controllers_with_hardware():
    """Test des contr√¥leurs avec le mat√©riel r√©el"""
    print("üçì TEST DES CONTR√îLEURS SUR RASPBERRY PI")
    print("=" * 45)
    
    # Configuration du logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # Charger la configuration
    print("üìÅ Chargement de la configuration...")
    config_files = load_config_files()
    if not config_files:
        print("‚ùå Impossible de charger la configuration")
        return False
    
    print("‚úÖ Configuration charg√©e")
    
    # Cr√©er le contr√¥leur principal
    print("\nüéõÔ∏è  Initialisation du contr√¥leur principal...")
    main_config = ControllerConfig(
        name="main_controller",
        enabled=True,
        update_interval=2.0,
        auto_start=False
    )
    
    try:
        main_controller = MainController(main_config, config_files)
        
        # Initialiser le contr√¥leur
        if not main_controller.initialize():
            print("‚ùå √âchec initialisation contr√¥leur principal")
            return False
        
        print("‚úÖ Contr√¥leur principal initialis√©")
        
        # D√©marrer le contr√¥leur
        print("\nüöÄ D√©marrage du contr√¥leur principal...")
        if not main_controller.start():
            print("‚ùå √âchec d√©marrage contr√¥leur principal")
            return False
        
        print("‚úÖ Contr√¥leur principal d√©marr√©")
        
        # Test de fonctionnement avec affichage en temps r√©el
        print("\n‚è±Ô∏è  Test de fonctionnement (30 secondes)...")
        print("   ‚Ä¢ Tournez l'encodeur pour naviguer")
        print("   ‚Ä¢ Appuyez sur le bouton pour changer d'√©cran")
        print("   ‚Ä¢ Observez l'√©cran ST7735")
        print("   ‚Ä¢ V√©rifiez les LED/actionneurs")
        
        start_time = time.time()
        last_status_time = 0
        
        while time.time() - start_time < 30:
            current_time = time.time()
            
            # Afficher le statut toutes les 5 secondes
            if current_time - last_status_time >= 5:
                status = main_controller.get_system_status()
                
                print(f"\nüìä Statut du syst√®me (t+{current_time - start_time:.0f}s):")
                print(f"   ‚Ä¢ Mode: {status['system_state']['mode']}")
                print(f"   ‚Ä¢ Uptime: {status['system_state']['system_uptime']:.1f}s")
                
                # Afficher les donn√©es des capteurs
                sensor_data = status['system_state']['last_sensor_data']
                if sensor_data:
                    print(f"   ‚Ä¢ Temp√©rature: {sensor_data.get('temperature', 'N/A')}¬∞C")
                    print(f"   ‚Ä¢ Humidit√©: {sensor_data.get('humidity', 'N/A')}%")
                    print(f"   ‚Ä¢ Qualit√© air: {sensor_data.get('air_quality', 'N/A')}")
                    print(f"   ‚Ä¢ Niveau eau: {sensor_data.get('water_percentage', 'N/A')}%")
                
                # Afficher l'√©tat des actionneurs
                actuator_states = status['system_state']['last_actuator_states']
                if actuator_states:
                    print(f"   ‚Ä¢ Chauffage: {'ON' if actuator_states.get('heater_on', False) else 'OFF'}")
                    print(f"   ‚Ä¢ Humidificateur: {'ON' if actuator_states.get('humidifier_on', False) else 'OFF'}")
                    print(f"   ‚Ä¢ LED: {actuator_states.get('led_intensity', 0)}%")
                    print(f"   ‚Ä¢ Distributeur: {actuator_states.get('feeder_position', 'N/A')}")
                
                # Afficher les alertes
                alerts = status['system_state']['active_alerts']
                if alerts:
                    print(f"   ‚Ä¢ Alertes: {len(alerts)}")
                    for alert in alerts[:3]:  # Afficher les 3 premi√®res
                        print(f"     - {alert.get('type', 'Unknown')}: {alert.get('message', 'No message')}")
                else:
                    print("   ‚Ä¢ Alertes: Aucune")
                
                last_status_time = current_time
            
            time.sleep(1)
        
        # Test des modes
        print("\nüîÑ Test des modes de fonctionnement...")
        
        # Mode manuel
        print("   ‚Ä¢ Activation mode manuel...")
        if main_controller.set_mode("manual"):
            print("   ‚úÖ Mode manuel activ√©")
        else:
            print("   ‚ùå √âchec activation mode manuel")
        
        time.sleep(3)
        
        # Mode maintenance
        print("   ‚Ä¢ Activation mode maintenance...")
        if main_controller.set_mode("maintenance"):
            print("   ‚úÖ Mode maintenance activ√©")
        else:
            print("   ‚ùå √âchec activation mode maintenance")
        
        time.sleep(3)
        
        # Retour au mode auto
        print("   ‚Ä¢ Retour au mode automatique...")
        if main_controller.set_mode("auto"):
            print("   ‚úÖ Mode automatique activ√©")
        else:
            print("   ‚ùå √âchec activation mode automatique")
        
        time.sleep(3)
        
        # Test d'arr√™t d'urgence
        print("\nüö® Test d'arr√™t d'urgence...")
        print("   ‚Ä¢ Activation arr√™t d'urgence...")
        main_controller.emergency_stop()
        print("   ‚úÖ Arr√™t d'urgence activ√©")
        print("   ‚Ä¢ V√©rifiez que tous les actionneurs sont √©teints")
        
        time.sleep(3)
        
        print("   ‚Ä¢ D√©sactivation arr√™t d'urgence...")
        main_controller.emergency_resume()
        print("   ‚úÖ Arr√™t d'urgence d√©sactiv√©")
        
        # Arr√™ter le contr√¥leur
        print("\nüõë Arr√™t du contr√¥leur principal...")
        if main_controller.stop():
            print("‚úÖ Contr√¥leur principal arr√™t√©")
        else:
            print("‚ùå √âchec arr√™t contr√¥leur principal")
        
        # Nettoyer
        main_controller.cleanup()
        print("‚úÖ Contr√¥leur principal nettoy√©")
        
        print("\nüéâ TEST TERMIN√â AVEC SUCC√àS")
        print("   ‚Ä¢ V√©rifiez que l'√©cran s'est √©teint")
        print("   ‚Ä¢ V√©rifiez que tous les actionneurs sont √©teints")
        print("   ‚Ä¢ V√©rifiez qu'il n'y a pas d'erreurs dans les logs")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test contr√¥leurs: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üçì D√âMARRAGE DES TESTS RASPBERRY PI")
    print("=" * 35)
    
    # Test du contr√¥leur principal avec mat√©riel
    if not test_controllers_with_hardware():
        print("\n‚ùå √âchec test contr√¥leur principal")
        sys.exit(1)
    
    print("\nüéâ TOUS LES TESTS R√âUSSIS")
    sys.exit(0)
