#!/usr/bin/env python3
"""
Test s√©curis√© pour servomoteur et brumisateur
Mouvements tr√®s limit√©s pour √©viter les dommages mat√©riels
"""

import sys
import os
import time
import json
import logging
from pathlib import Path

# Ajouter le r√©pertoire parent au path pour acc√©der aux modules
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from src.controllers.drivers.servo_driver import ServoDriver
    from src.controllers.drivers.base_driver import DriverConfig, DriverState
    SERVO_AVAILABLE = True
except ImportError as e:
    SERVO_AVAILABLE = False
    print(f"‚ö†Ô∏è  Driver servo non disponible: {e}")

try:
    import RPi.GPIO as GPIO
    RASPBERRY_PI = True
except ImportError:
    RASPBERRY_PI = False
    print("‚ö†Ô∏è  RPi.GPIO non disponible - mode simulation")

class SafeServoBrumisateurTest:
    """Test s√©curis√© pour servomoteur et brumisateur"""
    
    def __init__(self):
        self.config = self.load_gpio_config()
        self.servo = None
        self.test_results = {
            "servo_initialization": False,
            "servo_safe_movement": False,
            "servo_limits_test": False,
            "brumisateur_test": False
        }
        
        # Configuration de s√©curit√©
        self.SAFE_ANGLE_RANGE = 5  # Seulement 5 degr√©s de mouvement
        self.SAFE_CENTER_ANGLE = 90  # Angle central de s√©curit√©
        self.MOVEMENT_DELAY = 0.5  # D√©lai entre mouvements
        
    def load_gpio_config(self):
        """Charge la configuration GPIO depuis le fichier JSON"""
        try:
            config_path = Path(__file__).parent.parent / "config" / "gpio_config.json"
            with open(config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ùå Erreur chargement config GPIO: {e}")
            return None
    
    def get_servo_config(self):
        """R√©cup√®re la configuration du servomoteur"""
        if not self.config:
            return None
            
        try:
            actuators = self.config.get("gpio_pins", {}).get("actuators", {})
            servo_config = actuators.get("feeder_servo", {})
            
            return {
                "pin": servo_config.get("pwm_pin", 18),
                "frequency": servo_config.get("frequency", 50),
                "description": servo_config.get("description", "Servo-moteur distributeur")
            }
        except Exception as e:
            print(f"‚ùå Erreur r√©cup√©ration config servo: {e}")
            return None
    
    def test_servo_initialization(self):
        """Test d'initialisation s√©curis√©e du servomoteur"""
        print("\nüîß TEST D'INITIALISATION SERVOMOTEUR")
        print("=" * 40)
        
        if not SERVO_AVAILABLE:
            print("‚ùå Driver servo non disponible")
            return False
            
        if not RASPBERRY_PI:
            print("‚ö†Ô∏è  Mode simulation - pas de mat√©riel r√©el")
            return True
            
        servo_config = self.get_servo_config()
        if not servo_config:
            print("‚ùå Configuration servo non trouv√©e")
            return False
            
        print(f"üìç Pin GPIO: {servo_config['pin']}")
        print(f"üìç Fr√©quence: {servo_config['frequency']}Hz")
        print(f"üìç Description: {servo_config['description']}")
        
        try:
            # Cr√©er le driver avec configuration s√©curis√©e
            config = DriverConfig("safe_test", enabled=True)
            self.servo = ServoDriver(config, servo_config['pin'], servo_config['frequency'])
            
            # D√©finir des limites tr√®s restrictives pour la s√©curit√©
            self.servo.set_limits(
                self.SAFE_CENTER_ANGLE - self.SAFE_ANGLE_RANGE,
                self.SAFE_CENTER_ANGLE + self.SAFE_ANGLE_RANGE
            )
            
            if self.servo.initialize():
                print("‚úÖ Servomoteur initialis√© avec succ√®s")
                print(f"   ‚Ä¢ Limites de s√©curit√©: {self.SAFE_CENTER_ANGLE - self.SAFE_ANGLE_RANGE}¬∞ - {self.SAFE_CENTER_ANGLE + self.SAFE_ANGLE_RANGE}¬∞")
                self.test_results["servo_initialization"] = True
                return True
            else:
                print("‚ùå √âchec d'initialisation du servomoteur")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur initialisation: {e}")
            return False
    
    def test_safe_servo_movement(self):
        """Test de mouvement s√©curis√© du servomoteur"""
        print("\nüéõÔ∏è  TEST DE MOUVEMENT S√âCURIS√â")
        print("=" * 35)
        
        if not self.servo or not self.servo.is_ready():
            print("‚ùå Servomoteur non initialis√©")
            return False
            
        print("‚ö†Ô∏è  ATTENTION: Mouvements tr√®s limit√©s pour la s√©curit√©")
        print(f"   ‚Ä¢ Plage de mouvement: ¬±{self.SAFE_ANGLE_RANGE}¬∞ autour de {self.SAFE_CENTER_ANGLE}¬∞")
        print("   ‚Ä¢ Dur√©e totale du test: ~3 secondes")
        
        try:
            # Position initiale s√©curis√©e
            print("\n1Ô∏è‚É£ Position initiale (centre)...")
            self.servo.write({"angle": self.SAFE_CENTER_ANGLE, "duration": 0.5})
            time.sleep(self.MOVEMENT_DELAY)
            
            # Petit mouvement vers la droite (s√©curis√©)
            print("2Ô∏è‚É£ Petit mouvement +2¬∞...")
            target_angle = self.SAFE_CENTER_ANGLE + 2
            self.servo.write({"angle": target_angle, "duration": 0.5})
            time.sleep(self.MOVEMENT_DELAY)
            
            # Retour au centre
            print("3Ô∏è‚É£ Retour au centre...")
            self.servo.write({"angle": self.SAFE_CENTER_ANGLE, "duration": 0.5})
            time.sleep(self.MOVEMENT_DELAY)
            
            # Petit mouvement vers la gauche (s√©curis√©)
            print("4Ô∏è‚É£ Petit mouvement -2¬∞...")
            target_angle = self.SAFE_CENTER_ANGLE - 2
            self.servo.write({"angle": target_angle, "duration": 0.5})
            time.sleep(self.MOVEMENT_DELAY)
            
            # Retour final au centre
            print("5Ô∏è‚É£ Position finale (centre)...")
            self.servo.write({"angle": self.SAFE_CENTER_ANGLE, "duration": 0.5})
            time.sleep(self.MOVEMENT_DELAY)
            
            print("‚úÖ Test de mouvement s√©curis√© termin√©")
            self.test_results["servo_safe_movement"] = True
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur mouvement servo: {e}")
            return False
    
    def test_servo_limits(self):
        """Test des limites de s√©curit√© du servomoteur"""
        print("\nüõ°Ô∏è  TEST DES LIMITES DE S√âCURIT√â")
        print("=" * 35)
        
        if not self.servo or not self.servo.is_ready():
            print("‚ùå Servomoteur non initialis√©")
            return False
            
        try:
            # Test angle minimum
            print("1Ô∏è‚É£ Test angle minimum...")
            min_angle = self.SAFE_CENTER_ANGLE - self.SAFE_ANGLE_RANGE
            self.servo.write({"angle": min_angle - 10, "duration": 0.3})  # Devrait √™tre limit√©
            actual_angle = self.servo.get_angle()
            print(f"   ‚Ä¢ Angle demand√©: {min_angle - 10}¬∞")
            print(f"   ‚Ä¢ Angle r√©el: {actual_angle}¬∞")
            
            time.sleep(self.MOVEMENT_DELAY)
            
            # Test angle maximum
            print("2Ô∏è‚É£ Test angle maximum...")
            max_angle = self.SAFE_CENTER_ANGLE + self.SAFE_ANGLE_RANGE
            self.servo.write({"angle": max_angle + 10, "duration": 0.3})  # Devrait √™tre limit√©
            actual_angle = self.servo.get_angle()
            print(f"   ‚Ä¢ Angle demand√©: {max_angle + 10}¬∞")
            print(f"   ‚Ä¢ Angle r√©el: {actual_angle}¬∞")
            
            time.sleep(self.MOVEMENT_DELAY)
            
            # Retour au centre
            print("3Ô∏è‚É£ Retour au centre...")
            self.servo.write({"angle": self.SAFE_CENTER_ANGLE, "duration": 0.3})
            
            print("‚úÖ Test des limites termin√©")
            self.test_results["servo_limits_test"] = True
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur test limites: {e}")
            return False
    
    def get_brumisateur_config(self):
        """R√©cup√®re la configuration du brumisateur"""
        if not self.config:
            return None
            
        try:
            actuators = self.config.get("gpio_pins", {}).get("actuators", {})
            brumisateur_config = actuators.get("humidifier", {})
            
            return {
                "pin": brumisateur_config.get("relay_pin", 5),
                "type": brumisateur_config.get("type", "digital"),
                "description": brumisateur_config.get("description", "Relais brumisateur")
            }
        except Exception as e:
            print(f"‚ùå Erreur r√©cup√©ration config brumisateur: {e}")
            return None
    
    def test_brumisateur(self):
        """Test du brumisateur (humidificateur)"""
        print("\nüí® TEST BRUMISATEUR")
        print("=" * 25)
        
        brumisateur_config = self.get_brumisateur_config()
        if not brumisateur_config:
            print("‚ùå Configuration brumisateur non trouv√©e")
            return False
            
        print(f"üìç Pin GPIO: {brumisateur_config['pin']}")
        print(f"üìç Type: {brumisateur_config['type']}")
        print(f"üìç Description: {brumisateur_config['description']}")
        
        if not RASPBERRY_PI:
            print("‚ö†Ô∏è  Mode simulation - pas de mat√©riel r√©el")
            print("‚ÑπÔ∏è  Simulation du contr√¥le du brumisateur:")
            print("   ‚Ä¢ Activation relais pendant 2 secondes")
            print("   ‚Ä¢ V√©rification de l'√©tat du relais")
            print("   ‚Ä¢ D√©sactivation du relais")
            time.sleep(2)
            print("‚úÖ Simulation brumisateur termin√©e")
            self.test_results["brumisateur_test"] = True
            return True
        
        try:
            import RPi.GPIO as GPIO
            
            # Configuration du pin en sortie
            GPIO.setmode(GPIO.BCM)
            GPIO.setup(brumisateur_config['pin'], GPIO.OUT)
            
            print("\n1Ô∏è‚É£ Test d'activation du brumisateur...")
            print("   ‚ö†Ô∏è  Le brumisateur va s'activer pendant 3 secondes")
            print("   ‚ö†Ô∏è  Assurez-vous qu'il n'y a pas d'eau √† proximit√©")
            
            # Confirmation de s√©curit√©
            response = input("   Continuer le test? (o/n): ").lower().strip()
            if response not in ['o', 'oui', 'y', 'yes']:
                print("   ‚ùå Test annul√© par l'utilisateur")
                return False
            
            # Activation du relais
            GPIO.output(brumisateur_config['pin'], GPIO.HIGH)
            print("   ‚úÖ Brumisateur activ√© - relais ON")
            
            # Test de 3 secondes
            for i in range(3):
                print(f"   ‚è±Ô∏è  Temps restant: {3-i} secondes...")
                time.sleep(1)
            
            # D√©sactivation du relais
            GPIO.output(brumisateur_config['pin'], GPIO.LOW)
            print("   ‚úÖ Brumisateur d√©sactiv√© - relais OFF")
            
            # Test de l'√©tat du relais
            print("\n2Ô∏è‚É£ V√©rification de l'√©tat du relais...")
            current_state = GPIO.input(brumisateur_config['pin'])
            print(f"   ‚Ä¢ √âtat actuel: {'HIGH' if current_state else 'LOW'}")
            print(f"   ‚Ä¢ Statut: {'‚úÖ Relais fonctionnel' if not current_state else '‚ö†Ô∏è  Relais encore actif'}")
            
            # Nettoyage
            GPIO.setup(brumisateur_config['pin'], GPIO.IN)
            
            print("\n‚úÖ Test brumisateur termin√©")
            self.test_results["brumisateur_test"] = True
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur test brumisateur: {e}")
            return False
    
    def cleanup(self):
        """Nettoyage des ressources"""
        print("\nüßπ NETTOYAGE DES RESSOURCES")
        print("=" * 30)
        
        if self.servo:
            try:
                # Position s√©curis√©e avant arr√™t
                self.servo.write({"angle": self.SAFE_CENTER_ANGLE, "duration": 0.5})
                time.sleep(0.5)
                self.servo.cleanup()
                print("‚úÖ Servomoteur nettoy√©")
            except Exception as e:
                print(f"‚ö†Ô∏è  Erreur nettoyage servo: {e}")
        
        if RASPBERRY_PI:
            try:
                GPIO.cleanup()
                print("‚úÖ GPIO nettoy√©")
            except Exception as e:
                print(f"‚ö†Ô∏è  Erreur nettoyage GPIO: {e}")
    
    def print_results(self):
        """Affiche les r√©sultats des tests"""
        print("\nüìä R√âSULTATS DES TESTS")
        print("=" * 25)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results.values() if result)
        
        for test_name, result in self.test_results.items():
            status = "‚úÖ" if result else "‚ùå"
            test_display = test_name.replace("_", " ").title()
            print(f"{status} {test_display}")
        
        print(f"\nüìà Score: {passed_tests}/{total_tests} ({passed_tests/total_tests*100:.1f}%)")
        
        if passed_tests == total_tests:
            print("üéâ Tous les tests sont pass√©s avec succ√®s!")
        elif passed_tests > 0:
            print("‚ö†Ô∏è  Certains tests ont √©chou√©")
        else:
            print("‚ùå Aucun test n'a r√©ussi")
    
    def run_all_tests(self):
        """Lance tous les tests"""
        print("üöÄ D√âMARRAGE DES TESTS S√âCURIS√âS")
        print("=" * 40)
        print("‚ö†Ô∏è  Tests avec mouvements tr√®s limit√©s pour la s√©curit√©")
        print("üí® Test du brumisateur avec confirmation de s√©curit√©")
        print("=" * 40)
        
        try:
            # Test d'initialisation
            self.test_servo_initialization()
            
            # Test de mouvement s√©curis√©
            if self.test_results["servo_initialization"]:
                self.test_safe_servo_movement()
                self.test_servo_limits()
            
            # Test du brumisateur
            self.test_brumisateur()
            
        except KeyboardInterrupt:
            print("\nüõë Tests interrompus par l'utilisateur")
        except Exception as e:
            print(f"\n‚ùå Erreur inattendue: {e}")
        finally:
            self.cleanup()
            self.print_results()

def main():
    """Fonction principale"""
    print("üîß TEST S√âCURIS√â SERVOMOTEUR ET BRUMISATEUR")
    print("=" * 50)
    print("‚ö†Ô∏è  ATTENTION: Mouvements tr√®s limit√©s pour la s√©curit√©")
    print("üí® Test du brumisateur avec confirmation de s√©curit√©")
    print("=" * 50)
    
    # V√©rification des pr√©requis
    if not SERVO_AVAILABLE:
        print("‚ùå Driver servo non disponible")
        print("   Installez les d√©pendances: pip install RPi.GPIO")
        return
    
    if not RASPBERRY_PI:
        print("‚ö†Ô∏è  Mode simulation - pas de mat√©riel r√©el")
        print("   Pour tester sur Raspberry Pi, installez: pip install RPi.GPIO")
    
    # Confirmation de l'utilisateur
    print("\n‚ö†Ô∏è  CONFIRMATION DE S√âCURIT√â")
    print("Les tests utilisent des mouvements tr√®s limit√©s (¬±5¬∞)")
    print("Assurez-vous qu'aucun objet fragile n'est √† proximit√© du servomoteur")
    print("Le test du brumisateur activera le relais pendant 3 secondes")
    
    response = input("\nContinuer les tests? (o/n): ").lower().strip()
    if response not in ['o', 'oui', 'y', 'yes']:
        print("‚ùå Tests annul√©s par l'utilisateur")
        return
    
    # Lancement des tests
    tester = SafeServoBrumisateurTest()
    tester.run_all_tests()

if __name__ == "__main__":
    main()
