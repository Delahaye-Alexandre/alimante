#!/usr/bin/env python3
"""
Tests d'int√©gration syst√®me Alimante
V√©rifie le fonctionnement global du syst√®me
"""

import sys
import os
import time
import logging
import threading
from pathlib import Path

# Ajouter le r√©pertoire src au path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from utils.event_bus import EventBus
from services.control_service import ControlService
from services.safety_service import SafetyService
from ui.ui_controller import UIController
from loops.main_loop import MainLoop

class SystemIntegrationTester:
    """Testeur d'int√©gration syst√®me"""
    
    def __init__(self):
        self.event_bus = EventBus()
        self.test_results = {}
        
        # Configuration de base
        self.config = {
            'terrarium_config': {
                'name': 'Test Terrarium',
                'species': 'mantis_religiosa',
                'temperature_target': 25.0,
                'humidity_target': 60.0
            },
            'species_config': {
                'mantis_religiosa': {
                    'temperature_range': [20, 30],
                    'humidity_range': [40, 80],
                    'feeding_schedule': 'daily'
                }
            },
            'policies': {
                'heating': {'enabled': True, 'target_temp': 25.0},
                'humidification': {'enabled': True, 'target_humidity': 60.0},
                'lighting': {'enabled': True, 'schedule': '12h_on'}
            },
            'safety_limits': {
                'temperature': {'min': 15, 'max': 35},
                'humidity': {'min': 30, 'max': 80},
                'air_quality': {'hazardous_threshold': 300},
                'water_level': {'critical_level': 15.0}
            }
        }
        
        # Initialiser les services
        self.safety_service = SafetyService(self.event_bus)
        self.control_service = ControlService(self.config, self.event_bus)
        self.ui_controller = UIController(self.event_bus)
        self.main_loop = MainLoop(self.event_bus, self.safety_service)
        
        # √âtat de test
        self.test_events_received = []
        self.setup_test_listeners()
    
    def setup_test_listeners(self):
        """Configure les √©couteurs de test"""
        # √âcouter les √©v√©nements critiques
        self.event_bus.on('emergency_stop', self._on_emergency_stop)
        self.event_bus.on('safety_alert', self._on_safety_alert)
        self.event_bus.on('sensor_data_updated', self._on_sensor_data)
    
    def _on_emergency_stop(self, data):
        self.test_events_received.append(('emergency_stop', data))
        print(f"üö® Arr√™t d'urgence re√ßu: {data.get('reason', 'Inconnu')}")
    
    def _on_safety_alert(self, data):
        self.test_events_received.append(('safety_alert', data))
        print(f"‚ö†Ô∏è Alerte s√©curit√©: {data.get('message', 'Inconnue')}")
    
    def _on_sensor_data(self, data):
        self.test_events_received.append(('sensor_data_updated', data))
        print(f"üìä Donn√©es capteurs: {data.get('data', {})}")
    
    def test_system_startup(self):
        """Test du d√©marrage du syst√®me"""
        print("\nüöÄ Test de d√©marrage du syst√®me...")
        
        try:
            # D√©marrer l'interface utilisateur
            ui_started = self.ui_controller.start()
            assert ui_started, "√âchec d√©marrage UI"
            
            # D√©marrer la boucle principale (en arri√®re-plan)
            loop_thread = threading.Thread(target=self.main_loop.run, daemon=True)
            loop_thread.start()
            
            # Laisser le temps au syst√®me de s'initialiser
            time.sleep(2)
            
            print("‚úÖ Syst√®me d√©marr√© avec succ√®s")
            return True
            
        except Exception as e:
            print(f"‚ùå √âchec d√©marrage syst√®me: {e}")
            return False
    
    def test_sensor_data_flow(self):
        """Test du flux de donn√©es des capteurs"""
        print("\nüìä Test du flux de donn√©es capteurs...")
        
        try:
            # Simuler des donn√©es de capteurs
            sensor_data = {
                'temperature': 25.5,
                'humidity': 60.0,
                'air_quality': 45,
                'water_level': 80.0,
                'timestamp': time.time()
            }
            
            # √âmettre l'√©v√©nement
            self.event_bus.emit('sensor_data_updated', {
                'data': sensor_data,
                'timestamp': time.time()
            })
            
            # Attendre le traitement
            time.sleep(1)
            
            # V√©rifier que l'√©v√©nement a √©t√© trait√©
            sensor_events = [e for e in self.test_events_received if e[0] == 'sensor_data_updated']
            assert len(sensor_events) > 0, "Donn√©es capteurs non trait√©es"
            
            print("‚úÖ Flux de donn√©es capteurs fonctionnel")
            return True
            
        except Exception as e:
            print(f"‚ùå √âchec test flux capteurs: {e}")
            return False
    
    def test_safety_system(self):
        """Test du syst√®me de s√©curit√©"""
        print("\nüõ°Ô∏è Test du syst√®me de s√©curit√©...")
        
        try:
            # Simuler des donn√©es dangereuses
            dangerous_data = {
                'temperature': 40.0,  # Trop chaud
                'humidity': 90.0,     # Trop humide
                'air_quality': 350,   # Qualit√© d'air dangereuse
                'water_level': 10.0,  # Niveau d'eau critique
                'timestamp': time.time()
            }
            
            # V√©rifier les limites de s√©curit√©
            violations = self.safety_service.check_safety_limits(dangerous_data)
            
            if violations:
                print(f"‚ö†Ô∏è Violations d√©tect√©es: {len(violations)}")
                for violation in violations:
                    print(f"   - {violation['message']}")
                
                # V√©rifier que les √©v√©nements d'alerte sont √©mis
                time.sleep(1)
                safety_events = [e for e in self.test_events_received if e[0] == 'safety_alert']
                assert len(safety_events) > 0, "Alertes s√©curit√© non √©mises"
                
                print("‚úÖ Syst√®me de s√©curit√© fonctionnel")
                return True
            else:
                print("‚ö†Ô∏è Aucune violation d√©tect√©e (peut-√™tre normal)")
                return True
                
        except Exception as e:
            print(f"‚ùå √âchec test s√©curit√©: {e}")
            return False
    
    def test_control_system(self):
        """Test du syst√®me de contr√¥le"""
        print("\nüéõÔ∏è Test du syst√®me de contr√¥le...")
        
        try:
            # Simuler des donn√©es n√©cessitant un contr√¥le
            sensor_data = {
                'temperature': 20.0,  # Trop froid
                'humidity': 40.0,     # Trop sec
                'timestamp': time.time()
            }
            
            # √âmettre les donn√©es
            self.event_bus.emit('sensor_data_updated', {
                'data': sensor_data,
                'timestamp': time.time()
            })
            
            # Attendre le traitement
            time.sleep(2)
            
            # V√©rifier que le syst√®me a r√©agi
            print("‚úÖ Syst√®me de contr√¥le test√©")
            return True
            
        except Exception as e:
            print(f"‚ùå √âchec test contr√¥le: {e}")
            return False
    
    def test_ui_responsiveness(self):
        """Test de la r√©activit√© de l'interface"""
        print("\nüñ•Ô∏è Test de r√©activit√© UI...")
        
        try:
            # V√©rifier que l'UI est active
            ui_status = self.ui_controller.get_status()
            assert ui_status['is_running'], "UI non active"
            
            # Simuler des √©v√©nements UI
            self.event_bus.emit('encoder_turned', {
                'direction': 'clockwise',
                'value': 1
            })
            
            self.event_bus.emit('encoder_pressed', {
                'pressed': True,
                'timestamp': time.time()
            })
            
            time.sleep(0.5)
            
            print("‚úÖ Interface utilisateur r√©active")
            return True
            
        except Exception as e:
            print(f"‚ùå √âchec test UI: {e}")
            return False
    
    def test_system_stress(self):
        """Test de stress du syst√®me"""
        print("\nüí™ Test de stress du syst√®me...")
        
        try:
            start_time = time.time()
            
            # √âmettre beaucoup d'√©v√©nements rapidement
            for i in range(50):
                sensor_data = {
                    'temperature': 25 + (i % 10) * 0.5,
                    'humidity': 60 + (i % 5) * 2,
                    'timestamp': time.time()
                }
                
                self.event_bus.emit('sensor_data_updated', {
                    'data': sensor_data,
                    'timestamp': time.time()
                })
                
                time.sleep(0.01)  # Petit d√©lai
            
            end_time = time.time()
            duration = end_time - start_time
            
            print(f"‚è±Ô∏è 50 √©v√©nements trait√©s en {duration:.2f}s")
            print(f"üìä Performance: {50/duration:.1f} √©v√©nements/seconde")
            
            # V√©rifier que le syst√®me est toujours stable
            ui_status = self.ui_controller.get_status()
            assert ui_status['is_running'], "UI plant√©e apr√®s stress test"
            
            print("‚úÖ Syst√®me stable sous stress")
            return True
            
        except Exception as e:
            print(f"‚ùå √âchec test stress: {e}")
            return False
    
    def test_system_shutdown(self):
        """Test d'arr√™t propre du syst√®me"""
        print("\nüõë Test d'arr√™t du syst√®me...")
        
        try:
            # Arr√™ter l'UI
            self.ui_controller.stop()
            
            # V√©rifier l'arr√™t
            ui_status = self.ui_controller.get_status()
            assert not ui_status['is_running'], "UI non arr√™t√©e"
            
            print("‚úÖ Arr√™t propre r√©ussi")
            return True
            
        except Exception as e:
            print(f"‚ùå √âchec arr√™t syst√®me: {e}")
            return False
    
    def run_all_tests(self):
        """Ex√©cute tous les tests d'int√©gration"""
        print("üîó D√©marrage des tests d'int√©gration syst√®me Alimante")
        print("=" * 60)
        
        tests = [
            self.test_system_startup,
            self.test_sensor_data_flow,
            self.test_safety_system,
            self.test_control_system,
            self.test_ui_responsiveness,
            self.test_system_stress,
            self.test_system_shutdown
        ]
        
        passed = 0
        failed = 0
        
        for test in tests:
            try:
                if test():
                    passed += 1
                else:
                    failed += 1
            except Exception as e:
                print(f"‚ùå Test √©chou√©: {e}")
                failed += 1
        
        print("\n" + "=" * 60)
        print(f"üìä R√©sultats: {passed} r√©ussis, {failed} √©chou√©s")
        print(f"üìà Total √©v√©nements re√ßus: {len(self.test_events_received)}")
        
        return failed == 0

def main():
    """Fonction principale de test"""
    # Configuration du logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # Cr√©er et ex√©cuter les tests
    tester = SystemIntegrationTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéâ Tous les tests d'int√©gration sont pass√©s !")
        return 0
    else:
        print("\nüí• Certains tests d'int√©gration ont √©chou√© !")
        return 1

if __name__ == "__main__":
    sys.exit(main())
