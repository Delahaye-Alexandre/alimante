#!/usr/bin/env python3
"""
Tests de performance Alimante
Mesure les performances du syst√®me d'√©v√©nements et des services
"""

import sys
import os
import time
import threading
import psutil
import logging
from pathlib import Path

# Ajouter le r√©pertoire src au path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from utils.event_bus import EventBus
from services.control_service import ControlService
from services.safety_service import SafetyService
from ui.ui_controller import UIController

class PerformanceTester:
    """Testeur de performance"""
    
    def __init__(self):
        self.event_bus = EventBus()
        self.config = {
            'terrarium_config': {},
            'species_config': {},
            'policies': {},
            'safety_limits': {
                'temperature': {'min': 15, 'max': 35},
                'humidity': {'min': 30, 'max': 80},
                'air_quality': {'hazardous_threshold': 300}
            }
        }
        
        # Initialiser les services
        self.control_service = ControlService(self.config, self.event_bus)
        self.safety_service = SafetyService(self.event_bus)
        self.ui_controller = UIController(self.event_bus)
        
        # M√©triques
        self.event_count = 0
        self.start_time = None
        self.end_time = None
    
    def _event_counter(self, data):
        """Compteur d'√©v√©nements pour les tests"""
        self.event_count += 1
    
    def test_event_bus_performance(self):
        """Test de performance du bus d'√©v√©nements"""
        print("\n‚ö° Test de performance du bus d'√©v√©nements...")
        
        # S'abonner √† un √©v√©nement
        self.event_bus.on('test_event', self._event_counter)
        
        # Test avec diff√©rents volumes d'√©v√©nements
        test_cases = [100, 500, 1000, 2000]
        
        for count in test_cases:
            self.event_count = 0
            start_time = time.time()
            
            # √âmettre les √©v√©nements
            for i in range(count):
                self.event_bus.emit('test_event', {'id': i, 'data': f'test_{i}'})
            
            end_time = time.time()
            duration = end_time - start_time
            
            events_per_second = count / duration if duration > 0 else 0
            
            print(f"   {count:4d} √©v√©nements: {duration:.3f}s ({events_per_second:.0f} evt/s)")
            
            # V√©rifier que tous les √©v√©nements ont √©t√© trait√©s
            assert self.event_count == count, f"Seulement {self.event_count}/{count} √©v√©nements trait√©s"
        
        print("‚úÖ Test de performance du bus d'√©v√©nements r√©ussi")
        return True
    
    def test_memory_usage(self):
        """Test d'utilisation m√©moire"""
        print("\nüíæ Test d'utilisation m√©moire...")
        
        process = psutil.Process()
        initial_memory = process.memory_info().rss / 1024 / 1024  # MB
        
        print(f"   M√©moire initiale: {initial_memory:.1f} MB")
        
        # Cr√©er beaucoup d'√©v√©nements et de donn√©es
        events_data = []
        for i in range(1000):
            events_data.append({
                'id': i,
                'sensor_data': {
                    'temperature': 25.0 + i * 0.01,
                    'humidity': 60.0 + i * 0.02,
                    'air_quality': 50 + i,
                    'timestamp': time.time()
                }
            })
        
        # √âmettre tous les √©v√©nements
        for data in events_data:
            self.event_bus.emit('sensor_data_updated', data)
        
        time.sleep(1)  # Laisser le temps au traitement
        
        final_memory = process.memory_info().rss / 1024 / 1024  # MB
        memory_increase = final_memory - initial_memory
        
        print(f"   M√©moire finale: {final_memory:.1f} MB")
        print(f"   Augmentation: {memory_increase:.1f} MB")
        
        # V√©rifier que l'augmentation m√©moire est raisonnable (< 50 MB)
        if memory_increase < 50:
            print("‚úÖ Utilisation m√©moire acceptable")
            return True
        else:
            print(f"‚ö†Ô∏è Utilisation m√©moire √©lev√©e: {memory_increase:.1f} MB")
            return False
    
    def test_concurrent_events(self):
        """Test d'√©v√©nements concurrents"""
        print("\nüîÑ Test d'√©v√©nements concurrents...")
        
        self.event_count = 0
        self.start_time = time.time()
        
        def emit_events(thread_id, count):
            """Fonction pour √©mettre des √©v√©nements dans un thread"""
            for i in range(count):
                self.event_bus.emit('test_event', {
                    'thread_id': thread_id,
                    'event_id': i,
                    'timestamp': time.time()
                })
        
        # Cr√©er plusieurs threads qui √©mettent des √©v√©nements
        threads = []
        events_per_thread = 200
        num_threads = 5
        
        for i in range(num_threads):
            thread = threading.Thread(target=emit_events, args=(i, events_per_thread))
            threads.append(thread)
            thread.start()
        
        # Attendre que tous les threads se terminent
        for thread in threads:
            thread.join()
        
        self.end_time = time.time()
        duration = self.end_time - self.start_time
        total_events = num_threads * events_per_thread
        events_per_second = total_events / duration if duration > 0 else 0
        
        print(f"   {num_threads} threads, {events_per_thread} √©v√©nements/thread")
        print(f"   Total: {total_events} √©v√©nements en {duration:.3f}s")
        print(f"   Performance: {events_per_second:.0f} √©v√©nements/seconde")
        
        # V√©rifier que tous les √©v√©nements ont √©t√© trait√©s
        assert self.event_count == total_events, f"Seulement {self.event_count}/{total_events} √©v√©nements trait√©s"
        
        print("‚úÖ Test d'√©v√©nements concurrents r√©ussi")
        return True
    
    def test_service_performance(self):
        """Test de performance des services"""
        print("\n‚öôÔ∏è Test de performance des services...")
        
        # Test du service de s√©curit√©
        start_time = time.time()
        
        for i in range(100):
            sensor_data = {
                'temperature': 25.0 + (i % 20) * 0.5,
                'humidity': 60.0 + (i % 10) * 2.0,
                'air_quality': 50 + (i % 50),
                'water_level': 80.0 - (i % 20) * 2.0,
                'timestamp': time.time()
            }
            
            self.safety_service.check_safety_limits(sensor_data)
        
        end_time = time.time()
        duration = end_time - start_time
        checks_per_second = 100 / duration if duration > 0 else 0
        
        print(f"   Service de s√©curit√©: 100 v√©rifications en {duration:.3f}s ({checks_per_second:.0f} v√©rif/s)")
        
        # Test du service de contr√¥le
        start_time = time.time()
        
        for i in range(50):
            sensor_data = {
                'temperature': 25.0,
                'humidity': 60.0,
                'air_quality': 50,
                'timestamp': time.time()
            }
            
            self.event_bus.emit('sensor_data_updated', {'data': sensor_data})
        
        time.sleep(1)  # Laisser le temps au traitement
        end_time = time.time()
        
        print(f"   Service de contr√¥le: 50 cycles en {end_time - start_time:.3f}s")
        
        print("‚úÖ Test de performance des services r√©ussi")
        return True
    
    def test_ui_responsiveness(self):
        """Test de r√©activit√© de l'interface"""
        print("\nüñ•Ô∏è Test de r√©activit√© de l'interface...")
        
        # D√©marrer l'UI
        ui_started = self.ui_controller.start()
        if not ui_started:
            print("‚ùå Impossible de d√©marrer l'UI")
            return False
        
        # Test de r√©activit√© avec des √©v√©nements rapides
        start_time = time.time()
        
        for i in range(50):
            self.event_bus.emit('sensor_data_updated', {
                'data': {
                    'temperature': 25.0 + i * 0.1,
                    'humidity': 60.0 + i * 0.2,
                    'timestamp': time.time()
                }
            })
            time.sleep(0.01)  # 10ms entre les √©v√©nements
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"   50 mises √† jour UI en {duration:.3f}s")
        
        # Arr√™ter l'UI
        self.ui_controller.stop()
        
        print("‚úÖ Test de r√©activit√© UI r√©ussi")
        return True
    
    def run_all_tests(self):
        """Ex√©cute tous les tests de performance"""
        print("‚ö° D√©marrage des tests de performance Alimante")
        print("=" * 60)
        
        tests = [
            self.test_event_bus_performance,
            self.test_memory_usage,
            self.test_concurrent_events,
            self.test_service_performance,
            self.test_ui_responsiveness
        ]
        
        passed = 0
        failed = 0
        
        for test in tests:
            try:
                if test():
                    passed += 1
                else:
                    failed += 1
            except Exception as e:
                print(f"‚ùå Test √©chou√©: {e}")
                failed += 1
        
        print("\n" + "=" * 60)
        print(f"üìä R√©sultats: {passed} r√©ussis, {failed} √©chou√©s")
        
        return failed == 0

def main():
    """Fonction principale de test"""
    # Configuration du logging
    logging.basicConfig(
        level=logging.WARNING,  # R√©duire les logs pour les tests de performance
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # Cr√©er et ex√©cuter les tests
    tester = PerformanceTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéâ Tous les tests de performance sont pass√©s !")
        return 0
    else:
        print("\nüí• Certains tests de performance ont √©chou√© !")
        return 1

if __name__ == "__main__":
    sys.exit(main())
