#!/usr/bin/env python3
"""
Test du service de persistance Alimante
V√©rifie que la base de donn√©es SQLite fonctionne correctement
"""

import sys
import os
import time
from pathlib import Path

# Ajouter le r√©pertoire src au path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from services.persistence_service import PersistenceService

def test_persistence_service():
    """Test du service de persistance"""
    print("üß™ TEST DU SERVICE DE PERSISTANCE")
    print("=" * 50)
    
    # Configuration de test
    config = {
        'terrariums': {
            'data_retention_days': 7
        }
    }
    
    try:
        # Initialiser le service
        print("1. Initialisation du service...")
        persistence = PersistenceService(config)
        
        if not persistence.initialize():
            print("‚ùå √âchec initialisation du service")
            return False
        
        print("‚úÖ Service initialis√©")
        
        # Test de stockage de donn√©es de capteurs
        print("\n2. Test stockage donn√©es capteurs...")
        sensor_data = {
            'timestamp': time.time(),
            'temperature': 25.5,
            'humidity': 60.0,
            'air_quality': 45.0,
            'air_quality_level': 'good',
            'water_level': 80.0,
            'water_percentage': 80.0
        }
        
        success = persistence.store_sensor_data('terrarium_test', sensor_data)
        if success:
            print("‚úÖ Donn√©es capteurs stock√©es")
        else:
            print("‚ùå √âchec stockage donn√©es capteurs")
            return False
        
        # Test de stockage d'alimentation
        print("\n3. Test stockage alimentation...")
        success = persistence.set_last_feeding_date(
            'terrarium_test', 
            'mantis_religiosa',
            'cricket',
            2.0,
            'Test alimentation automatique'
        )
        if success:
            print("‚úÖ Alimentation stock√©e")
        else:
            print("‚ùå √âchec stockage alimentation")
            return False
        
        # Test de r√©cup√©ration de la derni√®re alimentation
        print("\n4. Test r√©cup√©ration derni√®re alimentation...")
        last_feeding = persistence.get_last_feeding_date('terrarium_test')
        if last_feeding:
            print(f"‚úÖ Derni√®re alimentation: {last_feeding}")
        else:
            print("‚ùå Aucune alimentation trouv√©e")
            return False
        
        # Test de stockage d'alerte
        print("\n5. Test stockage alerte...")
        success = persistence.store_alert(
            'terrarium_test',
            'temperature',
            'warning',
            'Temp√©rature √©lev√©e d√©tect√©e',
            30.5,
            30.0
        )
        if success:
            print("‚úÖ Alerte stock√©e")
        else:
            print("‚ùå √âchec stockage alerte")
            return False
        
        # Test de stockage de d√©cision de contr√¥le
        print("\n6. Test stockage d√©cision contr√¥le...")
        success = persistence.store_control_decision(
            'terrarium_test',
            'heating',
            'heater',
            'turn_on',
            75.0,
            'Temp√©rature trop basse'
        )
        if success:
            print("‚úÖ D√©cision contr√¥le stock√©e")
        else:
            print("‚ùå √âchec stockage d√©cision contr√¥le")
            return False
        
        # Test de r√©cup√©ration de l'historique
        print("\n7. Test r√©cup√©ration historique...")
        history = persistence.get_sensor_history('terrarium_test', 1)
        if history:
            print(f"‚úÖ Historique r√©cup√©r√©: {len(history)} points")
        else:
            print("‚ùå Aucun historique trouv√©")
            return False
        
        # Test de r√©cup√©ration des alertes
        print("\n8. Test r√©cup√©ration alertes...")
        alerts = persistence.get_alerts('terrarium_test')
        if alerts:
            print(f"‚úÖ Alertes r√©cup√©r√©es: {len(alerts)} alertes")
        else:
            print("‚ùå Aucune alerte trouv√©e")
            return False
        
        # Test des statistiques
        print("\n9. Test statistiques...")
        stats = persistence.get_stats()
        print(f"‚úÖ Statistiques: {stats['stats']}")
        
        # Nettoyage
        print("\n10. Nettoyage...")
        persistence.cleanup()
        print("‚úÖ Service nettoy√©")
        
        print("\nüéâ TOUS LES TESTS R√âUSSIS !")
        print("Le service de persistance fonctionne correctement.")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur durant les tests: {e}")
        return False

if __name__ == "__main__":
    success = test_persistence_service()
    sys.exit(0 if success else 1)
