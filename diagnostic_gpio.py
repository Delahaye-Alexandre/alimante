#!/usr/bin/env python3
"""
Script de diagnostic des pins GPIO
Pour identifier les conflits et les processus qui utilisent les pins
"""

import subprocess
import os
import time

def check_gpio_usage():
    """V√©rifie l'utilisation des pins GPIO"""
    print("üîç DIAGNOSTIC PINS GPIO")
    print("=" * 40)
    
    # 1. V√©rifier les processus utilisant GPIO
    print("1. Processus utilisant GPIO:")
    try:
        result = subprocess.run(['sudo', 'lsof', '/dev/gpiochip*'], 
                              capture_output=True, text=True, timeout=10)
        if result.stdout:
            print(result.stdout)
        else:
            print("   Aucun processus d√©tect√©")
    except Exception as e:
        print(f"   Erreur: {e}")
    
    # 2. V√©rifier l'√©tat des pins GPIO
    print("\n2. √âtat des pins GPIO:")
    try:
        result = subprocess.run(['sudo', 'cat', '/sys/kernel/debug/gpio'], 
                              capture_output=True, text=True, timeout=10)
        if result.stdout:
            print(result.stdout)
        else:
            print("   Impossible de lire l'√©tat des pins")
    except Exception as e:
        print(f"   Erreur: {e}")
    
    # 3. V√©rifier les p√©riph√©riques SPI
    print("\n3. P√©riph√©riques SPI:")
    try:
        result = subprocess.run(['ls', '-la', '/dev/spi*'], 
                              capture_output=True, text=True, timeout=5)
        if result.stdout:
            print(result.stdout)
        else:
            print("   Aucun p√©riph√©rique SPI trouv√©")
    except Exception as e:
        print(f"   Erreur: {e}")
    
    # 4. V√©rifier les modules charg√©s
    print("\n4. Modules GPIO charg√©s:")
    try:
        result = subprocess.run(['lsmod'], capture_output=True, text=True, timeout=5)
        if result.stdout:
            gpio_modules = [line for line in result.stdout.split('\n') if 'gpio' in line.lower()]
            for module in gpio_modules:
                print(f"   {module}")
        else:
            print("   Impossible de lister les modules")
    except Exception as e:
        print(f"   Erreur: {e}")

def force_cleanup():
    """Force le nettoyage des pins GPIO"""
    print("\nüßπ NETTOYAGE FORC√â")
    print("=" * 40)
    
    # 1. Tuer tous les processus Python
    print("1. Arr√™t des processus Python...")
    try:
        subprocess.run(['sudo', 'pkill', '-f', 'python'], timeout=5)
        time.sleep(1)
        print("   ‚úÖ Processus Python arr√™t√©s")
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Erreur: {e}")
    
    # 2. Lib√©rer les pins GPIO
    print("2. Lib√©ration des pins GPIO...")
    try:
        import RPi.GPIO as GPIO
        GPIO.cleanup()
        print("   ‚úÖ Pins GPIO lib√©r√©es")
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Erreur: {e}")
    
    # 3. Attendre un peu
    print("3. Attente...")
    time.sleep(2)
    
    # 4. V√©rifier √† nouveau
    print("4. V√©rification post-nettoyage...")
    check_gpio_usage()

def main():
    """Fonction principale"""
    print("üîß DIAGNOSTIC ET NETTOYAGE GPIO")
    print("=" * 50)
    
    # Diagnostic initial
    check_gpio_usage()
    
    # Demander si on veut nettoyer
    print("\n" + "=" * 50)
    response = input("Voulez-vous forcer le nettoyage ? (y/N): ").strip().lower()
    
    if response in ['y', 'yes', 'oui']:
        force_cleanup()
        print("\n‚úÖ Nettoyage termin√©!")
        print("Vous pouvez maintenant relancer votre script principal.")
    else:
        print("\n‚ÑπÔ∏è  Nettoyage annul√©.")
        print("Pour nettoyer manuellement, ex√©cutez:")
        print("   sudo pkill -f python")
        print("   python3 cleanup_gpio.py")

if __name__ == "__main__":
    main()
