#!/usr/bin/env python3
"""
Guide de v√©rification des branchements ST7735
Test pour identifier les inversions de connexions
"""

import time
import sys
import signal
from config_alimante import get_gpio_config

# Import ST7735 et PIL
try:
    import st7735
    from PIL import Image, ImageDraw, ImageFont
    ST7735_AVAILABLE = True
    print("‚úÖ Librairies ST7735 et PIL import√©es avec succ√®s")
except Exception as e:
    ST7735_AVAILABLE = False
    print(f"‚ö†Ô∏è  Erreur lors de l'import: {e}")

class TestBranchements:
    def __init__(self):
        self.config = get_gpio_config()
        self.display = None
        self.is_initialized = False

        # Pins du display
        self.reset_pin = self.config['DISPLAY']['RESET_PIN']
        self.a0_pin = self.config['DISPLAY']['A0_PIN']

        # Gestionnaire d'arr√™t
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)

    def print_guide_branchements(self):
        """Affiche le guide des branchements corrects"""
        print("üîå GUIDE DES BRANCHEMENTS ST7735")
        print("=" * 50)
        print()
        print("üìã BRANCHEMENTS CORRECTS :")
        print("   ST7735    ‚Üí    Raspberry Pi")
        print("   -------        --------------")
        print("   VCC       ‚Üí    3.3V (Pin 1 ou 17)")
        print("   GND       ‚Üí    GND (Pin 6, 9, 14, 20, 25, 30, 34, 39)")
        print("   CS        ‚Üí    GPIO 8 (Pin 24) - Chip Select")
        print("   RST       ‚Üí    GPIO 24 (Pin 18) - Reset")
        print("   A0/DC     ‚Üí    GPIO 25 (Pin 22) - Data/Command")
        print("   SDA/MOSI  ‚Üí    GPIO 10 (Pin 19) - Data")
        print("   SCL/SCLK  ‚Üí    GPIO 11 (Pin 23) - Clock")
        print()
        print("‚ö†Ô∏è  ERREURS FR√âQUENTES :")
        print("   ‚Ä¢ A0/DC et RST invers√©s")
        print("   ‚Ä¢ SDA et SCL invers√©s")
        print("   ‚Ä¢ CS mal connect√©")
        print("   ‚Ä¢ Alimentation 3.3V vs 5V")
        print()

    def test_initialisation(self):
        """Test d'initialisation avec diff√©rents param√®tres"""
        if not ST7735_AVAILABLE:
            print("‚ùå ST7735 non disponible")
            return False

        print("üîß Test d'initialisation...")
        
        # Test avec rotation 0¬∞ d'abord
        try:
            print("   ‚Üí Test rotation 0¬∞")
            self.display = st7735.ST7735(
                port=0,
                cs=0,
                dc=self.a0_pin,
                rst=self.reset_pin,
                rotation=0
            )
            self.display.begin()
            self.is_initialized = True
            print(f"   ‚úÖ √âcran initialis√©: {self.display.width}x{self.display.height}")
            return True
        except Exception as e:
            print(f"   ‚ùå Erreur initialisation: {e}")
            return False

    def test_couleurs_diagnostic(self):
        """Test de diagnostic des couleurs"""
        if not self.is_initialized:
            print("‚ùå √âcran non initialis√©")
            return False

        print("üé® Test diagnostic couleurs...")
        
        # Test avec couleurs tr√®s contrast√©es
        tests = [
            ("ROUGE PUR", (255, 0, 0), "Si vous voyez du BLEU, A0/DC et RST sont invers√©s"),
            ("VERT PUR", (0, 255, 0), "Si vous voyez du MAGENTA, A0/DC et RST sont invers√©s"),
            ("BLEU PUR", (0, 0, 255), "Si vous voyez du ROUGE, A0/DC et RST sont invers√©s"),
            ("BLANC", (255, 255, 255), "Doit √™tre blanc pur"),
            ("NOIR", (0, 0, 0), "Doit √™tre noir pur"),
        ]

        try:
            for nom, couleur, diagnostic in tests:
                print(f"   ‚Üí {nom} {couleur}")
                print(f"      {diagnostic}")
                
                image = Image.new("RGB", (self.display.width, self.display.height), couleur)
                draw = ImageDraw.Draw(image)

                # Texte centr√©
                font = ImageFont.load_default()
                bbox = draw.textbbox((0, 0), nom, font=font)
                text_width = bbox[2] - bbox[0]
                text_height = bbox[3] - bbox[1]
                x = (self.display.width - text_width) // 2
                y = (self.display.height - text_height) // 2

                # Contraste texte
                brightness = sum(couleur) / 3
                text_color = (0,0,0) if brightness > 128 else (255,255,255)

                draw.text((x, y), nom, fill=text_color, font=font)
                draw.text((5, 5), f"RGB: {couleur}", fill=text_color, font=font)

                self.display.display(image)
                time.sleep(3)
            return True
        except Exception as e:
            print(f"‚ùå Erreur test couleurs: {e}")
            return False

    def test_rotations(self):
        """Test avec diff√©rentes rotations"""
        rotations = [0, 90, 180, 270]
        
        print("üîÑ Test des rotations...")
        
        for rotation in rotations:
            print(f"   ‚Üí Test rotation {rotation}¬∞")
            try:
                self.display = st7735.ST7735(
                    port=0,
                    cs=0,
                    dc=self.a0_pin,
                    rst=self.reset_pin,
                    rotation=rotation
                )
                self.display.begin()
                
                # Test rapide avec rouge
                image = Image.new("RGB", (self.display.width, self.display.height), (255, 0, 0))
                draw = ImageDraw.Draw(image)
                font = ImageFont.load_default()
                draw.text((10, 10), f"ROTATION {rotation}¬∞", fill=(255, 255, 255), font=font)
                draw.text((10, 30), "ROUGE (255,0,0)", fill=(255, 255, 255), font=font)
                
                self.display.display(image)
                time.sleep(2)
                
            except Exception as e:
                print(f"      ‚ùå Erreur rotation {rotation}¬∞: {e}")

    def test_pins_alternatives(self):
        """Test avec des configurations de pins alternatives"""
        print("üîß Test configurations alternatives...")
        
        # Configuration alternative 1: A0 et RST invers√©s
        print("   ‚Üí Test A0/RST invers√©s")
        try:
            self.display = st7735.ST7735(
                port=0,
                cs=0,
                dc=self.reset_pin,  # A0 et RST invers√©s
                rst=self.a0_pin,
                rotation=0
            )
            self.display.begin()
            
            image = Image.new("RGB", (self.display.width, self.display.height), (255, 0, 0))
            draw = ImageDraw.Draw(image)
            font = ImageFont.load_default()
            draw.text((10, 10), "A0/RST INVERSES", fill=(255, 255, 255), font=font)
            draw.text((10, 30), "ROUGE TEST", fill=(255, 255, 255), font=font)
            
            self.display.display(image)
            time.sleep(2)
            
        except Exception as e:
            print(f"      ‚ùå Erreur A0/RST invers√©s: {e}")

    def cleanup(self):
        """Nettoie l'√©cran"""
        if self.display:
            try:
                image = Image.new("RGB", (self.display.width, self.display.height), (0,0,0))
                self.display.display(image)
            except:
                pass
        self.is_initialized = False
        print("üßπ √âcran nettoy√©")

    def _signal_handler(self, signum, frame):
        print("\nüõë Arr√™t du programme")
        self.cleanup()
        sys.exit(0)

    def run_diagnostic(self):
        """Lance le diagnostic complet"""
        self.print_guide_branchements()
        
        print("üîß DIAGNOSTIC DES BRANCHEMENTS")
        print("=" * 40)
        
        if self.test_initialisation():
            self.test_couleurs_diagnostic()
            self.test_rotations()
            self.test_pins_alternatives()
        
        self.cleanup()
        
        print("\nüìã R√âSULTATS DU DIAGNOSTIC:")
        print("=" * 40)
        print("1. V√©rifiez les couleurs affich√©es vs attendues")
        print("2. Si ROUGE appara√Æt en BLEU ‚Üí A0/DC et RST invers√©s")
        print("3. Si l'√©cran est noir ‚Üí probl√®me d'alimentation ou CS")
        print("4. Si l'√©cran scintille ‚Üí probl√®me de clock ou donn√©es")
        print("5. Testez diff√©rentes rotations pour l'orientation")
        print()
        print("üîß CORRECTIONS POSSIBLES:")
        print("‚Ä¢ √âchangez A0/DC et RST si les couleurs sont invers√©es")
        print("‚Ä¢ V√©rifiez que CS est bien connect√© √† GPIO 8")
        print("‚Ä¢ V√©rifiez l'alimentation 3.3V")
        print("‚Ä¢ Testez avec rotation 0¬∞ d'abord")

if __name__ == "__main__":
    test = TestBranchements()
    test.run_diagnostic()
