#!/usr/bin/env python3
"""
Test de diagnostic des couleurs pour l'√©cran ST7735
Teste diff√©rentes rotations et configurations pour identifier le probl√®me de couleurs
"""

import time
import sys
import signal
from config_alimante import get_gpio_config

# Import ST7735 et PIL
try:
    import st7735
    from PIL import Image, ImageDraw, ImageFont
    ST7735_AVAILABLE = True
    print("‚úÖ Librairies ST7735 et PIL import√©es avec succ√®s")
except Exception as e:
    ST7735_AVAILABLE = False
    print(f"‚ö†Ô∏è  Erreur lors de l'import: {e}")

class DiagnosticCouleurs:
    def __init__(self):
        self.config = get_gpio_config()
        self.display = None
        self.is_initialized = False

        # Pins du display
        self.reset_pin = self.config['DISPLAY']['RESET_PIN']
        self.a0_pin = self.config['DISPLAY']['A0_PIN']

        # Gestionnaire d'arr√™t
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)

    def initialize(self, rotation=0):
        if not ST7735_AVAILABLE:
            print("‚ùå ST7735 non disponible")
            return False
        try:
            print(f"üîß Initialisation de l'√©cran ST7735 (rotation: {rotation}¬∞)...")
            self.display = st7735.ST7735(
                port=0,
                cs=0,
                dc=self.a0_pin,
                rst=self.reset_pin,
                rotation=rotation
            )
            self.display.begin()
            self.is_initialized = True
            print(f"‚úÖ √âcran initialis√©: {self.display.width}x{self.display.height}")
            return True
        except Exception as e:
            print(f"‚ùå Erreur initialisation: {e}")
            return False

    def test_couleurs_pures(self):
        """Test des couleurs pures RGB"""
        if not self.is_initialized:
            print("‚ùå √âcran non initialis√©")
            return False

        couleurs = [
            ("Rouge pur", (255, 0, 0)),
            ("Vert pur", (0, 255, 0)),
            ("Bleu pur", (0, 0, 255)),
            ("Blanc pur", (255, 255, 255)),
            ("Noir pur", (0, 0, 0))
        ]

        try:
            for nom, couleur in couleurs:
                print(f"   ‚Üí {nom} {couleur}")
                # Image plein √©cran
                image = Image.new("RGB", (self.display.width, self.display.height), couleur)
                draw = ImageDraw.Draw(image)

                # Texte centr√©
                font = ImageFont.load_default()
                bbox = draw.textbbox((0, 0), nom, font=font)
                text_width = bbox[2] - bbox[0]
                text_height = bbox[3] - bbox[1]
                x = (self.display.width - text_width) // 2
                y = (self.display.height - text_height) // 2

                # Contraste texte selon fond
                brightness = sum(couleur) / 3
                text_color = (0,0,0) if brightness > 128 else (255,255,255)

                draw.text((x, y), nom, fill=text_color, font=font)

                self.display.display(image)
                time.sleep(3)
            return True
        except Exception as e:
            print(f"‚ùå Erreur test couleurs: {e}")
            return False

    def test_couleurs_inversees(self):
        """Test avec couleurs invers√©es pour diagnostiquer"""
        if not self.is_initialized:
            print("‚ùå √âcran non initialis√©")
            return False

        # Test avec diff√©rentes inversions possibles
        tests = [
            ("Rouge normal", (255, 0, 0)),
            ("Rouge invers√© BGR", (0, 0, 255)),  # BGR au lieu de RGB
            ("Rouge invers√© GRB", (0, 255, 0)),  # GRB au lieu de RGB
            ("Vert normal", (0, 255, 0)),
            ("Vert invers√© BGR", (255, 0, 0)),   # BGR au lieu de RGB
            ("Vert invers√© GRB", (0, 0, 255)),   # GRB au lieu de RGB
            ("Bleu normal", (0, 0, 255)),
            ("Bleu invers√© BGR", (0, 255, 0)),   # BGR au lieu de RGB
            ("Bleu invers√© GRB", (255, 0, 0)),   # GRB au lieu de RGB
        ]

        try:
            for nom, couleur in tests:
                print(f"   ‚Üí {nom} {couleur}")
                image = Image.new("RGB", (self.display.width, self.display.height), couleur)
                draw = ImageDraw.Draw(image)

                # Texte
                font = ImageFont.load_default()
                draw.text((10, 10), nom, fill=(255, 255, 255), font=font)
                draw.text((10, 30), str(couleur), fill=(255, 255, 255), font=font)

                self.display.display(image)
                time.sleep(2)
            return True
        except Exception as e:
            print(f"‚ùå Erreur test couleurs invers√©es: {e}")
            return False

    def test_rotations(self):
        """Test avec diff√©rentes rotations"""
        rotations = [0, 90, 180, 270]
        
        for rotation in rotations:
            print(f"\nüîÑ Test avec rotation {rotation}¬∞")
            if self.initialize(rotation):
                self.test_couleurs_pures()
                time.sleep(1)
            else:
                print(f"‚ùå Impossible d'initialiser avec rotation {rotation}¬∞")

    def test_format_couleur(self):
        """Test avec diff√©rents formats de couleur"""
        if not self.is_initialized:
            print("‚ùå √âcran non initialis√©")
            return False

        print("üé® Test formats de couleur...")
        
        # Test avec format RGB vs BGR
        formats = [
            ("RGB", (255, 0, 0)),      # Rouge en RGB
            ("BGR", (0, 0, 255)),      # Rouge en BGR
            ("GRB", (0, 255, 0)),      # Rouge en GRB
        ]

        try:
            for format_name, couleur in formats:
                print(f"   ‚Üí Format {format_name}: {couleur}")
                image = Image.new("RGB", (self.display.width, self.display.height), couleur)
                draw = ImageDraw.Draw(image)

                # Texte
                font = ImageFont.load_default()
                draw.text((10, 10), f"Format {format_name}", fill=(255, 255, 255), font=font)
                draw.text((10, 30), str(couleur), fill=(255, 255, 255), font=font)

                self.display.display(image)
                time.sleep(2)
            return True
        except Exception as e:
            print(f"‚ùå Erreur test format couleur: {e}")
            return False

    def cleanup(self):
        """Nettoie l'√©cran"""
        if self.display:
            try:
                image = Image.new("RGB", (self.display.width, self.display.height), (0,0,0))
                self.display.display(image)
            except:
                pass
        self.is_initialized = False
        print("üßπ √âcran nettoy√©")

    def _signal_handler(self, signum, frame):
        print("\nüõë Arr√™t du programme")
        self.cleanup()
        sys.exit(0)

    def run_diagnostic(self):
        """Lance le diagnostic complet"""
        print("üîß DIAGNOSTIC COULEURS ST7735")
        print("=" * 50)
        
        print("\n1Ô∏è‚É£ Test avec rotation actuelle (270¬∞)")
        if self.initialize(270):
            self.test_couleurs_pures()
            print("\n2Ô∏è‚É£ Test couleurs invers√©es")
            self.test_couleurs_inversees()
            print("\n3Ô∏è‚É£ Test formats de couleur")
            self.test_format_couleur()
        
        print("\n4Ô∏è‚É£ Test avec diff√©rentes rotations")
        self.test_rotations()
        
        self.cleanup()
        print("\n‚úÖ Diagnostic termin√©")
        print("\nüìã Instructions:")
        print("   ‚Ä¢ Observez quelle couleur appara√Æt quand vous testez le rouge")
        print("   ‚Ä¢ Notez si les couleurs correspondent aux valeurs RGB attendues")
        print("   ‚Ä¢ Identifiez la rotation qui donne les bonnes couleurs")

if __name__ == "__main__":
    diagnostic = DiagnosticCouleurs()
    diagnostic.run_diagnostic()
