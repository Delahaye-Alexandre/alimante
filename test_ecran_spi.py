#!/usr/bin/env python3
"""
Test pour l'√©cran SPI ST7735
Configuration bas√©e sur config_alimante.py
Pins: RESET=24, A0/DC=25, CS=8, SDA/MOSI=10, SCL/SCLK=11
"""

import RPi.GPIO as GPIO
import time
import sys
import signal
import threading
from config_alimante import get_gpio_config, get_ui_config
from PIL import Image, ImageDraw, ImageFont
import st7735

class SPIDisplayTest:
    def __init__(self):
        """Initialise le test de l'√©cran SPI ST7735"""
        self.config = get_gpio_config()
        self.ui_config = get_ui_config()
        
        # Configuration des pins
        self.reset_pin = self.config['DISPLAY']['RESET_PIN']
        self.a0_pin = self.config['DISPLAY']['A0_PIN']
        self.cs_pin = self.config['DISPLAY']['CS_PIN']
        self.sda_pin = self.config['DISPLAY']['SDA_PIN']
        self.scl_pin = self.config['DISPLAY']['SCL_PIN']
        
        # Configuration de l'√©cran
        self.width = 128
        self.height = 160
        self.display = None
        self.is_initialized = False
        
        # Gestionnaire de signal pour arr√™t propre
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def initialize(self):
        """Initialise l'√©cran SPI ST7735"""
        try:
            # Configuration GPIO
            GPIO.setmode(GPIO.BCM)
            GPIO.setwarnings(False)
            
            # Configuration des pins de contr√¥le
            GPIO.setup(self.reset_pin, GPIO.OUT)
            GPIO.setup(self.a0_pin, GPIO.OUT)
            GPIO.setup(self.cs_pin, GPIO.OUT)
            
            # Initialisation de l'√©cran
            self.display = st7735.ST7735(
                rst=self.reset_pin,
                dc=self.a0_pin,
                spi=0,
                cs=self.cs_pin,
                width=self.width,
                height=self.height,
                rotation=0
            )
            
            self.display.begin()
            self.is_initialized = True
            
            print("‚úÖ √âcran SPI ST7735 initialis√©")
            print(f"   üìå RESET: GPIO {self.reset_pin}")
            print(f"   üìå A0/DC: GPIO {self.a0_pin}")
            print(f"   üìå CS:    GPIO {self.cs_pin}")
            print(f"   üìå SDA:   GPIO {self.sda_pin}")
            print(f"   üìå SCL:   GPIO {self.scl_pin}")
            print(f"   üìê R√©solution: {self.width}x{self.height}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'initialisation: {e}")
            return False
    
    def clear_screen(self, color=(0, 0, 0)):
        """Efface l'√©cran avec une couleur"""
        if not self.is_initialized:
            print("‚ùå √âcran non initialis√©")
            return False
        
        try:
            self.display.clear(color)
            return True
        except Exception as e:
            print(f"‚ùå Erreur lors de l'effacement: {e}")
            return False
    
    def test_colors(self):
        """Test des couleurs de base"""
        print("üé® Test des couleurs de base...")
        
        colors = [
            ("Rouge", (255, 0, 0)),
            ("Vert", (0, 255, 0)),
            ("Bleu", (0, 0, 255)),
            ("Blanc", (255, 255, 255)),
            ("Noir", (0, 0, 0)),
            ("Jaune", (255, 255, 0)),
            ("Cyan", (0, 255, 255)),
            ("Magenta", (255, 0, 255))
        ]
        
        for name, color in colors:
            print(f"   ‚Üí {name}")
            self.clear_screen(color)
            time.sleep(1)
        
        print("‚úÖ Test des couleurs termin√©")
    
    def test_gradients(self):
        """Test des d√©grad√©s"""
        print("üåà Test des d√©grad√©s...")
        
        # D√©grad√© horizontal rouge
        print("   ‚Üí D√©grad√© horizontal rouge")
        for x in range(self.width):
            intensity = int((x / self.width) * 255)
            color = (intensity, 0, 0)
            for y in range(self.height):
                self.display.set_pixel(x, y, color)
        self.display.display()
        time.sleep(2)
        
        # D√©grad√© vertical vert
        print("   ‚Üí D√©grad√© vertical vert")
        for y in range(self.height):
            intensity = int((y / self.height) * 255)
            color = (0, intensity, 0)
            for x in range(self.width):
                self.display.set_pixel(x, y, color)
        self.display.display()
        time.sleep(2)
        
        # D√©grad√© diagonal bleu
        print("   ‚Üí D√©grad√© diagonal bleu")
        for x in range(self.width):
            for y in range(self.height):
                intensity = int(((x + y) / (self.width + self.height)) * 255)
                color = (0, 0, intensity)
                self.display.set_pixel(x, y, color)
        self.display.display()
        time.sleep(2)
        
        print("‚úÖ Test des d√©grad√©s termin√©")
    
    def test_shapes(self):
        """Test des formes g√©om√©triques"""
        print("üî∑ Test des formes g√©om√©triques...")
        
        # Cr√©ation d'une image PIL
        image = Image.new('RGB', (self.width, self.height), (0, 0, 0))
        draw = ImageDraw.Draw(image)
        
        # Rectangle
        print("   ‚Üí Rectangle")
        draw.rectangle([10, 10, 60, 40], fill=(255, 0, 0), outline=(255, 255, 255))
        self.display.image(image)
        self.display.display()
        time.sleep(1)
        
        # Cercle
        print("   ‚Üí Cercle")
        image = Image.new('RGB', (self.width, self.height), (0, 0, 0))
        draw = ImageDraw.Draw(image)
        draw.ellipse([20, 20, 80, 80], fill=(0, 255, 0), outline=(255, 255, 255))
        self.display.image(image)
        self.display.display()
        time.sleep(1)
        
        # Lignes
        print("   ‚Üí Lignes")
        image = Image.new('RGB', (self.width, self.height), (0, 0, 0))
        draw = ImageDraw.Draw(image)
        for i in range(0, self.width, 10):
            draw.line([(i, 0), (i, self.height)], fill=(0, 0, 255), width=2)
        for i in range(0, self.height, 10):
            draw.line([(0, i), (self.width, i)], fill=(0, 0, 255), width=2)
        self.display.image(image)
        self.display.display()
        time.sleep(1)
        
        print("‚úÖ Test des formes termin√©")
    
    def test_text(self):
        """Test d'affichage de texte"""
        print("üìù Test d'affichage de texte...")
        
        try:
            # Cr√©ation d'une image avec texte
            image = Image.new('RGB', (self.width, self.height), (0, 0, 0))
            draw = ImageDraw.Draw(image)
            
            # Essai d'utiliser une police syst√®me
            try:
                font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 12)
            except:
                try:
                    font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 12)
                except:
                    font = ImageFont.load_default()
            
            # Texte de test
            texts = [
                "ALIMANTE",
                "Test SPI",
                "ST7735",
                "128x160",
                "Raspberry Pi"
            ]
            
            y_pos = 10
            for text in texts:
                print(f"   ‚Üí {text}")
                draw.text((10, y_pos), text, fill=(255, 255, 255), font=font)
                y_pos += 20
            
            self.display.image(image)
            self.display.display()
            time.sleep(3)
            
            print("‚úÖ Test de texte termin√©")
            
        except Exception as e:
            print(f"‚ùå Erreur lors du test de texte: {e}")
    
    def test_animation(self):
        """Test d'animation simple"""
        print("üé¨ Test d'animation...")
        
        # Animation de barre de progression
        print("   ‚Üí Barre de progression")
        for progress in range(0, 101, 5):
            image = Image.new('RGB', (self.width, self.height), (0, 0, 0))
            draw = ImageDraw.Draw(image)
            
            # Barre de progression
            bar_width = int((self.width - 20) * progress / 100)
            draw.rectangle([10, 60, 10 + bar_width, 80], fill=(0, 255, 0))
            draw.rectangle([10, 60, self.width - 10, 80], outline=(255, 255, 255))
            
            # Texte de pourcentage
            try:
                font = ImageFont.load_default()
                draw.text((10, 90), f"{progress}%", fill=(255, 255, 255), font=font)
            except:
                pass
            
            self.display.image(image)
            self.display.display()
            time.sleep(0.1)
        
        # Animation de pixels clignotants
        print("   ‚Üí Pixels clignotants")
        for frame in range(20):
            image = Image.new('RGB', (self.width, self.height), (0, 0, 0))
            draw = ImageDraw.Draw(image)
            
            # Pixels al√©atoires
            import random
            for _ in range(50):
                x = random.randint(0, self.width - 1)
                y = random.randint(0, self.height - 1)
                color = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
                draw.point((x, y), fill=color)
            
            self.display.image(image)
            self.display.display()
            time.sleep(0.2)
        
        print("‚úÖ Test d'animation termin√©")
    
    def test_menu_display(self):
        """Test d'affichage de menu"""
        print("üìã Test d'affichage de menu...")
        
        menu_items = [
            "üè† Accueil",
            "üí° Test LED",
            "üìä Monitoring",
            "‚öôÔ∏è Config",
            "üîß Tests",
            "üìà Stats",
            "‚ÑπÔ∏è √Ä propos"
        ]
        
        try:
            font = ImageFont.load_default()
            
            for i, item in enumerate(menu_items):
                print(f"   ‚Üí {item}")
                
                image = Image.new('RGB', (self.width, self.height), (0, 0, 0))
                draw = ImageDraw.Draw(image)
                
                # Titre
                draw.text((10, 10), "MENU ALIMANTE", fill=(255, 255, 0), font=font)
                
                # Item s√©lectionn√© (simulation)
                y_pos = 30
                for j, menu_item in enumerate(menu_items):
                    if j == i:
                        # Item s√©lectionn√© en surbrillance
                        draw.rectangle([5, y_pos - 2, self.width - 5, y_pos + 12], fill=(0, 100, 255))
                        draw.text((10, y_pos), menu_item, fill=(255, 255, 255), font=font)
                    else:
                        draw.text((10, y_pos), menu_item, fill=(128, 128, 128), font=font)
                    y_pos += 15
                
                self.display.image(image)
                self.display.display()
                time.sleep(1)
            
            print("‚úÖ Test de menu termin√©")
            
        except Exception as e:
            print(f"‚ùå Erreur lors du test de menu: {e}")
    
    def test_performance(self):
        """Test de performance de l'√©cran"""
        print("‚ö° Test de performance...")
        
        # Test de rafra√Æchissement rapide
        print("   ‚Üí Test de rafra√Æchissement rapide")
        start_time = time.time()
        
        for i in range(50):
            color = (i * 5 % 255, (i * 7) % 255, (i * 11) % 255)
            self.clear_screen(color)
        
        end_time = time.time()
        fps = 50 / (end_time - start_time)
        print(f"   ‚Üí FPS moyen: {fps:.1f}")
        
        # Test de pixels individuels
        print("   ‚Üí Test de pixels individuels")
        start_time = time.time()
        
        for i in range(1000):
            x = i % self.width
            y = (i // self.width) % self.height
            color = (i % 255, (i * 2) % 255, (i * 3) % 255)
            self.display.set_pixel(x, y, color)
        
        self.display.display()
        end_time = time.time()
        print(f"   ‚Üí 1000 pixels en {end_time - start_time:.3f}s")
        
        print("‚úÖ Test de performance termin√©")
    
    def test_sequence(self):
        """S√©quence de test compl√®te"""
        print("üöÄ D√©but de la s√©quence de test compl√®te...")
        
        tests = [
            ("Couleurs de base", self.test_colors),
            ("D√©grad√©s", self.test_gradients),
            ("Formes g√©om√©triques", self.test_shapes),
            ("Affichage de texte", self.test_text),
            ("Animation", self.test_animation),
            ("Menu d'affichage", self.test_menu_display),
            ("Performance", self.test_performance)
        ]
        
        for test_name, test_func in tests:
            print(f"\nüìã {test_name}...")
            try:
                test_func()
                print(f"‚úÖ {test_name} r√©ussi")
            except Exception as e:
                print(f"‚ùå {test_name} √©chou√©: {e}")
            
            time.sleep(1)
        
        print("\nüéâ S√©quence de test compl√®te termin√©e!")
    
    def cleanup(self):
        """Nettoie les ressources"""
        if self.display:
            self.clear_screen()
        GPIO.cleanup()
        print("üßπ Ressources nettoy√©es")
    
    def _signal_handler(self, signum, frame):
        """Gestionnaire de signal pour arr√™t propre"""
        print("\nüõë Arr√™t du programme...")
        self.cleanup()
        sys.exit(0)

def main():
    """Fonction principale de test"""
    print("=" * 60)
    print("üîß TEST √âCRAN SPI ST7735 - Alimante")
    print("üìç Configuration bas√©e sur config_alimante.py")
    print("=" * 60)
    
    # Cr√©ation du testeur
    display_test = SPIDisplayTest()
    
    try:
        # Initialisation
        if not display_test.initialize():
            print("‚ùå Impossible d'initialiser l'√©cran")
            return
        
        # Menu interactif
        while True:
            print("\n" + "=" * 40)
            print("MENU DE TEST √âCRAN SPI:")
            print("1. Test couleurs de base")
            print("2. Test d√©grad√©s")
            print("3. Test formes g√©om√©triques")
            print("4. Test affichage de texte")
            print("5. Test animation")
            print("6. Test menu d'affichage")
            print("7. Test de performance")
            print("8. S√©quence de test compl√®te")
            print("9. Effacer l'√©cran")
            print("0. Quitter")
            print("=" * 40)
            
            choice = input("Votre choix (0-9): ").strip()
            
            if choice == "0":
                break
            elif choice == "1":
                display_test.test_colors()
            elif choice == "2":
                display_test.test_gradients()
            elif choice == "3":
                display_test.test_shapes()
            elif choice == "4":
                display_test.test_text()
            elif choice == "5":
                display_test.test_animation()
            elif choice == "6":
                display_test.test_menu_display()
            elif choice == "7":
                display_test.test_performance()
            elif choice == "8":
                display_test.test_sequence()
            elif choice == "9":
                color_choice = input("Couleur (r/g/b/w/k ou r,g,b): ").strip().lower()
                if color_choice == "r":
                    display_test.clear_screen((255, 0, 0))
                elif color_choice == "g":
                    display_test.clear_screen((0, 255, 0))
                elif color_choice == "b":
                    display_test.clear_screen((0, 0, 255))
                elif color_choice == "w":
                    display_test.clear_screen((255, 255, 255))
                elif color_choice == "k":
                    display_test.clear_screen((0, 0, 0))
                else:
                    try:
                        r, g, b = map(int, color_choice.split(','))
                        display_test.clear_screen((r, g, b))
                    except:
                        display_test.clear_screen()
            else:
                print("‚ùå Choix invalide")
    
    except KeyboardInterrupt:
        print("\nüõë Arr√™t par l'utilisateur")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    finally:
        # Nettoyage
        display_test.cleanup()
        print("üëã Test termin√©!")

if __name__ == "__main__":
    main()
