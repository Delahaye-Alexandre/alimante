#!/usr/bin/env python3
"""
Test pour l'√©cran SPI ST7735
V√©rification du fonctionnement de l'√©cran avec tests complets
"""

import RPi.GPIO as GPIO
import time
import sys
import signal
import random
from config_alimante import get_gpio_config

# Import pour l'√©cran ST7735 (n√©cessite l'installation de la librairie)
try:
    import ST7735
    from PIL import Image, ImageDraw, ImageFont
    ST7735_AVAILABLE = True
except ImportError:
    ST7735_AVAILABLE = False
    print("‚ö†Ô∏è  Librairie ST7735 non disponible. Installation requise:")
    print("   pip install ST7735 Pillow")

class EcranSPITest:
    def __init__(self):
        """Initialise le testeur d'√©cran SPI"""
        self.config = get_gpio_config()
        self.display = None
        self.is_initialized = False
        
        # Configuration des pins depuis config_alimante.py
        self.reset_pin = self.config['DISPLAY']['RESET_PIN']
        self.a0_pin = self.config['DISPLAY']['A0_PIN']
        self.cs_pin = self.config['DISPLAY']['CS_PIN']
        self.sda_pin = self.config['DISPLAY']['SDA_PIN']
        self.scl_pin = self.config['DISPLAY']['SCL_PIN']
        
        # Configuration GPIO
        GPIO.setmode(GPIO.BCM)
        GPIO.setwarnings(False)
        
        # Gestionnaire de signal pour arr√™t propre
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def initialize(self):
        """Initialise l'√©cran SPI"""
        if not ST7735_AVAILABLE:
            print("‚ùå Impossible d'initialiser l'√©cran: librairie ST7735 manquante")
            return False
        
        try:
            # Configuration des pins de contr√¥le
            GPIO.setup(self.reset_pin, GPIO.OUT)
            GPIO.setup(self.a0_pin, GPIO.OUT)
            GPIO.setup(self.cs_pin, GPIO.OUT)
            
            # Initialisation de l'√©cran ST7735
            self.display = ST7735.ST7735(
                port=0,
                cs=self.cs_pin,
                dc=self.a0_pin,
                rst=self.reset_pin,
                spi_speed_hz=4000000  # 4MHz pour stabilit√©
            )
            
            # D√©marrage de l'√©cran
            self.display.begin()
            self.is_initialized = True
            print("‚úÖ √âcran SPI ST7735 initialis√© avec succ√®s")
            print(f"   üìå Pins: RST={self.reset_pin}, A0={self.a0_pin}, CS={self.cs_pin}")
            print(f"   üìå SPI: SDA={self.sda_pin}, SCL={self.scl_pin}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'initialisation de l'√©cran: {e}")
            return False
    
    def test_initialisation(self):
        """Test 1: V√©rification de l'initialisation"""
        print("\nüîß TEST 1: Initialisation de l'√©cran")
        print("-" * 40)
        
        if not self.is_initialized:
            print("‚ùå √âcran non initialis√©")
            return False
        
        try:
            # Test de cr√©ation d'image
            image = Image.new('RGB', (self.display.width, self.display.height), color=(0, 0, 0))
            self.display.display(image)
            print("‚úÖ √âcran initialis√© et pr√™t")
            return True
        except Exception as e:
            print(f"‚ùå Erreur lors du test d'initialisation: {e}")
            return False
    
    def test_couleurs_base(self):
        """Test 2: Affichage des couleurs de base"""
        print("\nüé® TEST 2: Couleurs de base")
        print("-" * 40)
        
        if not self.is_initialized:
            print("‚ùå √âcran non initialis√©")
            return False
        
        couleurs = [
            ("Noir", (0, 0, 0)),
            ("Blanc", (255, 255, 255)),
            ("Rouge", (255, 0, 0)),
            ("Vert", (0, 255, 0)),
            ("Bleu", (0, 0, 255)),
            ("Jaune", (255, 255, 0)),
            ("Cyan", (0, 255, 255)),
            ("Magenta", (255, 0, 255))
        ]
        
        try:
            for nom, couleur in couleurs:
                print(f"   Affichage {nom}...")
                image = Image.new('RGB', (self.display.width, self.display.height), color=couleur)
                self.display.display(image)
                time.sleep(1)
            
            print("‚úÖ Test des couleurs de base r√©ussi")
            return True
        except Exception as e:
            print(f"‚ùå Erreur lors du test des couleurs: {e}")
            return False
    
    def test_formes_geometriques(self):
        """Test 3: Affichage de formes g√©om√©triques"""
        print("\nüìê TEST 3: Formes g√©om√©triques")
        print("-" * 40)
        
        if not self.is_initialized:
            print("‚ùå √âcran non initialis√©")
            return False
        
        try:
            # Cr√©ation d'une image avec formes
            image = Image.new('RGB', (self.display.width, self.display.height), color=(0, 0, 0))
            draw = ImageDraw.Draw(image)
            
            # Rectangle
            draw.rectangle([10, 10, 50, 30], fill=(255, 0, 0), outline=(255, 255, 255))
            
            # Cercle
            draw.ellipse([70, 10, 110, 50], fill=(0, 255, 0), outline=(255, 255, 255))
            
            # Ligne
            draw.line([(10, 70), (100, 70)], fill=(0, 0, 255), width=3)
            
            # Triangle (polygone)
            draw.polygon([(60, 80), (80, 100), (40, 100)], fill=(255, 255, 0))
            
            self.display.display(image)
            print("‚úÖ Formes g√©om√©triques affich√©es")
            time.sleep(3)
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors du test des formes: {e}")
            return False
    
    def test_texte(self):
        """Test 4: Affichage de texte"""
        print("\nüìù TEST 4: Affichage de texte")
        print("-" * 40)
        
        if not self.is_initialized:
            print("‚ùå √âcran non initialis√©")
            return False
        
        try:
            # Cr√©ation d'une image avec texte
            image = Image.new('RGB', (self.display.width, self.display.height), color=(0, 0, 0))
            draw = ImageDraw.Draw(image)
            
            # Essayer d'utiliser une police par d√©faut
            try:
                font = ImageFont.load_default()
            except:
                font = None
            
            # Texte de test
            text_lines = [
                "ALIMANTE",
                "Test SPI",
                "ST7735 OK",
                "GPIO Test"
            ]
            
            y_position = 10
            for line in text_lines:
                if font:
                    draw.text((10, y_position), line, fill=(255, 255, 255), font=font)
                else:
                    draw.text((10, y_position), line, fill=(255, 255, 255))
                y_position += 20
            
            self.display.display(image)
            print("‚úÖ Texte affich√© avec succ√®s")
            time.sleep(3)
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors du test du texte: {e}")
            return False
    
    def test_animation(self):
        """Test 5: Animation simple"""
        print("\nüé¨ TEST 5: Animation")
        print("-" * 40)
        
        if not self.is_initialized:
            print("‚ùå √âcran non initialis√©")
            return False
        
        try:
            print("   Animation de barre de progression...")
            
            for progress in range(0, 101, 5):
                image = Image.new('RGB', (self.display.width, self.display.height), color=(0, 0, 0))
                draw = ImageDraw.Draw(image)
                
                # Barre de progression
                bar_width = int((self.display.width - 20) * progress / 100)
                draw.rectangle([10, 10, 10 + bar_width, 30], fill=(0, 255, 0))
                draw.rectangle([10, 10, self.display.width - 10, 30], outline=(255, 255, 255))
                
                # Texte de pourcentage
                try:
                    font = ImageFont.load_default()
                    draw.text((10, 40), f"{progress}%", fill=(255, 255, 255), font=font)
                except:
                    draw.text((10, 40), f"{progress}%", fill=(255, 255, 255))
                
                self.display.display(image)
                time.sleep(0.1)
            
            print("‚úÖ Animation termin√©e")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors du test d'animation: {e}")
            return False
    
    def test_performance(self):
        """Test 6: Test de performance"""
        print("\n‚ö° TEST 6: Performance")
        print("-" * 40)
        
        if not self.is_initialized:
            print("‚ùå √âcran non initialis√©")
            return False
        
        try:
            print("   Test de rafra√Æchissement rapide...")
            
            start_time = time.time()
            frames = 0
            
            # Test de 50 frames avec couleurs al√©atoires
            for i in range(50):
                # Couleur al√©atoire
                color = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
                image = Image.new('RGB', (self.display.width, self.display.height), color=color)
                self.display.display(image)
                frames += 1
            
            end_time = time.time()
            duration = end_time - start_time
            fps = frames / duration
            
            print(f"‚úÖ Performance: {fps:.1f} FPS sur {frames} frames")
            print(f"   Dur√©e: {duration:.2f}s")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors du test de performance: {e}")
            return False
    
    def test_complet(self):
        """Ex√©cute tous les tests"""
        print("=" * 60)
        print("üîß TEST COMPLET √âCRAN SPI ST7735")
        print("=" * 60)
        
        if not self.initialize():
            print("‚ùå Impossible de continuer sans initialisation")
            return False
        
        tests = [
            ("Initialisation", self.test_initialisation),
            ("Couleurs de base", self.test_couleurs_base),
            ("Formes g√©om√©triques", self.test_formes_geometriques),
            ("Affichage texte", self.test_texte),
            ("Animation", self.test_animation),
            ("Performance", self.test_performance)
        ]
        
        results = []
        
        for nom_test, fonction_test in tests:
            print(f"\nüîÑ Ex√©cution: {nom_test}")
            try:
                result = fonction_test()
                results.append((nom_test, result))
                if result:
                    print(f"‚úÖ {nom_test}: R√âUSSI")
                else:
                    print(f"‚ùå {nom_test}: √âCHEC")
            except Exception as e:
                print(f"‚ùå {nom_test}: ERREUR - {e}")
                results.append((nom_test, False))
        
        # R√©sum√© des r√©sultats
        print("\n" + "=" * 60)
        print("üìä R√âSUM√â DES TESTS")
        print("=" * 60)
        
        reussis = sum(1 for _, result in results if result)
        total = len(results)
        
        for nom_test, result in results:
            status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHEC"
            print(f"   {nom_test}: {status}")
        
        print(f"\nüìà R√©sultat global: {reussis}/{total} tests r√©ussis")
        
        if reussis == total:
            print("üéâ Tous les tests sont pass√©s avec succ√®s!")
        else:
            print("‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez la configuration.")
        
        return reussis == total
    
    def menu_interactif(self):
        """Menu interactif pour tests individuels"""
        if not self.initialize():
            print("‚ùå Impossible d'initialiser l'√©cran")
            return
        
        while True:
            print("\n" + "=" * 40)
            print("MENU DE TEST √âCRAN SPI")
            print("=" * 40)
            print("1. Test d'initialisation")
            print("2. Test des couleurs de base")
            print("3. Test des formes g√©om√©triques")
            print("4. Test d'affichage de texte")
            print("5. Test d'animation")
            print("6. Test de performance")
            print("7. Test complet")
            print("0. Quitter")
            print("=" * 40)
            
            choice = input("Votre choix (0-7): ").strip()
            
            if choice == "0":
                break
            elif choice == "1":
                self.test_initialisation()
            elif choice == "2":
                self.test_couleurs_base()
            elif choice == "3":
                self.test_formes_geometriques()
            elif choice == "4":
                self.test_texte()
            elif choice == "5":
                self.test_animation()
            elif choice == "6":
                self.test_performance()
            elif choice == "7":
                self.test_complet()
            else:
                print("‚ùå Choix invalide")
    
    def cleanup(self):
        """Nettoie les ressources"""
        if self.display:
            # Effacer l'√©cran
            try:
                image = Image.new('RGB', (self.display.width, self.display.height), color=(0, 0, 0))
                self.display.display(image)
            except:
                pass
        
        GPIO.cleanup()
        self.is_initialized = False
        print("üßπ Ressources nettoy√©es")
    
    def _signal_handler(self, signum, frame):
        """Gestionnaire de signal pour arr√™t propre"""
        print("\nüõë Arr√™t du programme...")
        self.cleanup()
        sys.exit(0)

def main():
    """Fonction principale"""
    print("üîß TESTEUR √âCRAN SPI ST7735")
    print("Configuration depuis config_alimante.py")
    
    if not ST7735_AVAILABLE:
        print("\n‚ùå Librairie ST7735 non disponible")
        print("Installation requise:")
        print("   pip install ST7735 Pillow")
        return
    
    testeur = EcranSPITest()
    
    try:
        if len(sys.argv) > 1 and sys.argv[1] == "--auto":
            # Mode automatique
            testeur.test_complet()
        else:
            # Mode interactif
            testeur.menu_interactif()
    
    except KeyboardInterrupt:
        print("\nüõë Arr√™t par l'utilisateur")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    finally:
        testeur.cleanup()
        print("üëã Test termin√©!")

if __name__ == "__main__":
    main()
