#!/usr/bin/env python3
"""
Test ST7735 bas√© sur la documentation technique
Utilise les param√®tres corrects selon la datasheet
"""

import time
import sys
import signal
from config_alimante import get_gpio_config

# Import ST7735 et PIL
try:
    import st7735
    from PIL import Image, ImageDraw, ImageFont
    ST7735_AVAILABLE = True
    print("‚úÖ Librairies ST7735 et PIL import√©es avec succ√®s")
except Exception as e:
    ST7735_AVAILABLE = False
    print(f"‚ö†Ô∏è  Erreur lors de l'import: {e}")

class TestST7735Documentation:
    def __init__(self):
        self.config = get_gpio_config()
        self.display = None
        self.is_initialized = False

        # Pins du display
        self.reset_pin = self.config['DISPLAY']['RESET_PIN']
        self.a0_pin = self.config['DISPLAY']['A0_PIN']

        # Gestionnaire d'arr√™t
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)

    def initialize_correct(self):
        """Initialise l'√©cran selon la documentation ST7735"""
        if not ST7735_AVAILABLE:
            print("‚ùå ST7735 non disponible")
            return False
        try:
            print("üîß Initialisation ST7735 selon documentation...")
            
            # Configuration selon la datasheet ST7735
            self.display = st7735.ST7735(
                port=0,
                cs=0,
                dc=self.a0_pin,
                rst=self.reset_pin,
                rotation=270,
                invert=False,  # Pas d'inversion par d√©faut
                bgr=False      # Format RGB par d√©faut
            )
            self.display.begin()
            self.is_initialized = True
            print(f"‚úÖ √âcran initialis√©: {self.display.width}x{self.display.height}")
            print("   ‚Ä¢ Format: RGB (pas BGR)")
            print("   ‚Ä¢ Inversion: D√©sactiv√©e")
            print("   ‚Ä¢ Rotation: 270¬∞")
            return True
        except Exception as e:
            print(f"‚ùå Erreur initialisation: {e}")
            return False

    def test_couleurs_documentation(self):
        """Test des couleurs selon la documentation"""
        if not self.is_initialized:
            return False
            
        print("üé® Test couleurs selon documentation ST7735...")
        
        # Couleurs selon la documentation ST7735
        couleurs_doc = [
            ("Noir", (0, 0, 0), "Doit √™tre noir pur"),
            ("Blanc", (255, 255, 255), "Doit √™tre blanc pur"),
            ("Rouge", (255, 0, 0), "Doit √™tre rouge pur"),
            ("Vert", (0, 255, 0), "Doit √™tre vert pur"),
            ("Bleu", (0, 0, 255), "Doit √™tre bleu pur"),
            ("Jaune", (255, 255, 0), "Doit √™tre jaune pur"),
            ("Cyan", (0, 255, 255), "Doit √™tre cyan pur"),
            ("Magenta", (255, 0, 255), "Doit √™tre magenta pur"),
        ]
        
        try:
            for nom, couleur, description in couleurs_doc:
                print(f"   ‚Üí {nom} {couleur} - {description}")
                
                # Image plein √©cran
                image = Image.new("RGB", (self.display.width, self.display.height), couleur)
                draw = ImageDraw.Draw(image)
                font = ImageFont.load_default()
                
                # Texte centr√©
                bbox = draw.textbbox((0, 0), nom, font=font)
                text_width = bbox[2] - bbox[0]
                text_height = bbox[3] - bbox[1]
                x = (self.display.width - text_width) // 2
                y = (self.display.height - text_height) // 2
                
                # Contraste texte
                brightness = sum(couleur) / 3
                text_color = (0,0,0) if brightness > 128 else (255,255,255)
                
                draw.text((x, y), nom, fill=text_color, font=font)
                draw.text((5, 5), f"RGB: {couleur}", fill=text_color, font=font)
                draw.text((5, self.display.height - 25), description, fill=text_color, font=font)
                
                self.display.display(image)
                time.sleep(3)
                
            return True
        except Exception as e:
            print(f"‚ùå Erreur test couleurs: {e}")
            return False

    def test_format_rgb565(self):
        """Test avec format RGB565 selon documentation"""
        if not self.is_initialized:
            return False
            
        print("üé® Test format RGB565 selon documentation...")
        
        # Couleurs RGB565 selon la documentation
        couleurs_rgb565 = [
            ("Noir", 0x0000),
            ("Blanc", 0xFFFF),
            ("Rouge", 0xF800),
            ("Vert", 0x07E0),
            ("Bleu", 0x001F),
            ("Jaune", 0xFFE0),
            ("Cyan", 0x07FF),
            ("Magenta", 0xF81F),
        ]
        
        try:
            for nom, hex_color in couleurs_rgb565:
                print(f"   ‚Üí {nom} 0x{hex_color:04X}")
                
                # Conversion RGB565 vers RGB888
                r = (hex_color >> 11) & 0x1F
                g = (hex_color >> 5) & 0x3F
                b = hex_color & 0x1F
                
                # Conversion vers RGB888
                r = (r * 255) // 31
                g = (g * 255) // 63
                b = (b * 255) // 31
                
                rgb_color = (r, g, b)
                print(f"      RGB565: 0x{hex_color:04X} ‚Üí RGB888: {rgb_color}")
                
                # Image plein √©cran
                image = Image.new("RGB", (self.display.width, self.display.height), rgb_color)
                draw = ImageDraw.Draw(image)
                font = ImageFont.load_default()
                
                # Texte centr√©
                bbox = draw.textbbox((0, 0), nom, font=font)
                text_width = bbox[2] - bbox[0]
                text_height = bbox[3] - bbox[1]
                x = (self.display.width - text_width) // 2
                y = (self.display.height - text_height) // 2
                
                # Contraste texte
                brightness = sum(rgb_color) / 3
                text_color = (0,0,0) if brightness > 128 else (255,255,255)
                
                draw.text((x, y), nom, fill=text_color, font=font)
                draw.text((5, 5), f"RGB565: 0x{hex_color:04X}", fill=text_color, font=font)
                draw.text((5, self.display.height - 25), f"RGB888: {rgb_color}", fill=text_color, font=font)
                
                self.display.display(image)
                time.sleep(3)
                
            return True
        except Exception as e:
            print(f"‚ùå Erreur test RGB565: {e}")
            return False

    def test_parametres_documentation(self):
        """Test des param√®tres selon la documentation"""
        if not self.is_initialized:
            return False
            
        print("üîß Test param√®tres selon documentation...")
        
        # Test des param√®tres d'initialisation
        parametres = [
            ("Normal", {"invert": False, "bgr": False}),
            ("Invert", {"invert": True, "bgr": False}),
            ("BGR", {"invert": False, "bgr": True}),
            ("Invert+BGR", {"invert": True, "bgr": True}),
        ]
        
        try:
            for nom, params in parametres:
                print(f"   ‚Üí Test {nom}: {params}")
                
                # Recr√©er l'√©cran avec nouveaux param√®tres
                self.display = st7735.ST7735(
                    port=0,
                    cs=0,
                    dc=self.a0_pin,
                    rst=self.reset_pin,
                    rotation=270,
                    **params
                )
                self.display.begin()
                
                # Test avec rouge
                image = Image.new("RGB", (self.display.width, self.display.height), (255, 0, 0))
                draw = ImageDraw.Draw(image)
                font = ImageFont.load_default()
                
                draw.text((10, 10), f"Config: {nom}", fill=(255, 255, 255), font=font)
                draw.text((10, 30), "ROUGE (255,0,0)", fill=(255, 255, 255), font=font)
                draw.text((10, 50), f"Params: {params}", fill=(255, 255, 255), font=font)
                
                self.display.display(image)
                time.sleep(2)
                
            return True
        except Exception as e:
            print(f"‚ùå Erreur test param√®tres: {e}")
            return False

    def test_rotations_documentation(self):
        """Test des rotations selon la documentation"""
        if not self.is_initialized:
            return False
            
        print("üîÑ Test rotations selon documentation...")
        
        rotations = [0, 90, 180, 270]
        couleur_test = (255, 0, 0)  # Rouge
        
        try:
            for rotation in rotations:
                print(f"   ‚Üí Test rotation {rotation}¬∞")
                
                # Recr√©er l'√©cran avec nouvelle rotation
                self.display = st7735.ST7735(
                    port=0,
                    cs=0,
                    dc=self.a0_pin,
                    rst=self.reset_pin,
                    rotation=rotation,
                    invert=False,
                    bgr=False
                )
                self.display.begin()
                
                # Test avec rouge
                image = Image.new("RGB", (self.display.width, self.display.height), couleur_test)
                draw = ImageDraw.Draw(image)
                font = ImageFont.load_default()
                
                draw.text((10, 10), f"ROTATION {rotation}¬∞", fill=(255, 255, 255), font=font)
                draw.text((10, 30), "ROUGE (255,0,0)", fill=(255, 255, 255), font=font)
                
                self.display.display(image)
                time.sleep(2)
                
            return True
        except Exception as e:
            print(f"‚ùå Erreur test rotations: {e}")
            return False

    def cleanup(self):
        """Nettoie l'√©cran"""
        if self.display:
            try:
                image = Image.new("RGB", (self.display.width, self.display.height), (0,0,0))
                self.display.display(image)
            except:
                pass
        self.is_initialized = False
        print("üßπ √âcran nettoy√©")

    def _signal_handler(self, signum, frame):
        print("\nüõë Arr√™t du programme")
        self.cleanup()
        sys.exit(0)

    def run_tests(self):
        """Lance les tests selon la documentation"""
        print("üîß TEST ST7735 SELON DOCUMENTATION")
        if not self.initialize_correct():
            return
        
        print("\n" + "=" * 40)
        print("MENU DE TEST DOCUMENTATION:")
        print("1. Couleurs selon documentation")
        print("2. Format RGB565")
        print("3. Param√®tres d'initialisation")
        print("4. Rotations")
        print("5. Tous les tests")
        print("0. Quitter")
        print("=" * 40)
        
        while True:
            choice = input("Votre choix (0-5): ").strip()
            
            if choice == "0":
                break
            elif choice == "1":
                self.test_couleurs_documentation()
            elif choice == "2":
                self.test_format_rgb565()
            elif choice == "3":
                self.test_parametres_documentation()
            elif choice == "4":
                self.test_rotations_documentation()
            elif choice == "5":
                print("üöÄ Lancement de tous les tests...")
                self.test_couleurs_documentation()
                self.test_format_rgb565()
                self.test_parametres_documentation()
                self.test_rotations_documentation()
            else:
                print("‚ùå Choix invalide")
        
        self.cleanup()
        print("üëã Tests termin√©s")

if __name__ == "__main__":
    test = TestST7735Documentation()
    test.run_tests()
