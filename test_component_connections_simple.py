#!/usr/bin/env python3
"""
Test simple des connexions des composants Alimante
V√©rifie que tous les composants sont bien "branch√©s" sans d√©pendances mat√©rielles
"""

import sys
import os
from pathlib import Path

# Ajouter le r√©pertoire src au path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def test_imports():
    """Test des imports de tous les composants"""
    print("üì¶ TEST DES IMPORTS")
    print("=" * 30)
    
    imports_tests = [
        # Services principaux
        ("EventBus", "src.utils.event_bus"),
        ("SafetyService", "src.services.safety_service"),
        ("ConfigService", "src.services.config_service"),
        ("ControlService", "src.services.control_service"),
        ("SensorService", "src.services.sensor_service"),
        ("PersistenceService", "src.services.persistence_service"),
        ("TerrariumService", "src.services.terrarium_service"),
        
        # Services de contr√¥le
        ("HeatingService", "src.services.heating_service"),
        ("LightingService", "src.services.lighting_service"),
        ("HumidificationService", "src.services.humidification_service"),
        ("VentilationService", "src.services.ventilation_service"),
        ("FeedingService", "src.services.feeding_service"),
        
        # Services de cam√©ra et streaming
        ("CameraService", "src.services.camera_service"),
        ("StreamingService", "src.services.streaming_service"),
        ("SnapshotService", "src.services.snapshot_service"),
        ("AlertService", "src.services.alert_service"),
        
        # Contr√¥leurs
        ("MainController", "src.controllers.main_controller"),
        ("SensorController", "src.controllers.sensor_controller"),
        ("ActuatorController", "src.controllers.actuator_controller"),
        ("DeviceController", "src.controllers.device_controller"),
        
        # Contr√¥leurs d'actionneurs
        ("HeaterController", "src.controllers.actuators.heater_controller"),
        ("HumidifierController", "src.controllers.actuators.humidifier_controller"),
        ("FanController", "src.controllers.actuators.fan_controller"),
        ("FeederSASController", "src.controllers.actuators.feeder_sas_controller"),
        
        # Drivers
        ("CameraDriver", "src.controllers.drivers.camera_driver"),
        ("MosfetDriver", "src.controllers.drivers.mosfet_driver"),
        ("I2CLCDDriver", "src.controllers.drivers.i2c_lcd_driver"),
        
        # UI
        ("UIController", "src.ui.ui_controller"),
        ("MainLoop", "src.loops.main_loop"),
    ]
    
    passed = 0
    total = len(imports_tests)
    
    for class_name, module_path in imports_tests:
        try:
            module = __import__(module_path, fromlist=[class_name])
            getattr(module, class_name)
            print(f"  ‚úÖ {class_name}")
            passed += 1
        except Exception as e:
            print(f"  ‚ùå {class_name}: {e}")
    
    print(f"\nImports r√©ussis: {passed}/{total}")
    return passed == total

def test_configuration_loading():
    """Test du chargement des configurations"""
    print("\n‚öôÔ∏è TEST DU CHARGEMENT DES CONFIGURATIONS")
    print("=" * 50)
    
    try:
        from src.services.config_service import ConfigService
        
        config_service = ConfigService()
        all_configs = config_service.load_all_configs()
        
        print(f"‚úÖ Service de configuration initialis√©")
        print(f"   Configurations charg√©es: {len(all_configs)}")
        
        # V√©rifier les configurations principales
        expected_configs = ['main', 'gpio', 'network', 'safety', 'hardcoded']
        for config_name in expected_configs:
            if config_name in all_configs:
                print(f"  ‚úÖ {config_name}")
            else:
                print(f"  ‚ùå {config_name} manquant")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur chargement configurations: {e}")
        return False

def test_event_bus():
    """Test du bus d'√©v√©nements"""
    print("\nüîó TEST DU BUS D'√âV√âNEMENTS")
    print("=" * 30)
    
    try:
        from src.utils.event_bus import EventBus
        
        event_bus = EventBus()
        print("‚úÖ Bus d'√©v√©nements cr√©√©")
        
        # Test d'√©mission d'√©v√©nement
        test_data = {"test": "data", "timestamp": 1234567890}
        event_bus.emit("test_event", test_data)
        print("‚úÖ √âmission d'√©v√©nement r√©ussie")
        
        # Test d'abonnement √† un √©v√©nement
        received_data = None
        
        def test_callback(data):
            nonlocal received_data
            received_data = data
        
        event_bus.subscribe("test_event", test_callback)
        event_bus.emit("test_event", test_data)
        
        if received_data == test_data:
            print("‚úÖ R√©ception d'√©v√©nement r√©ussie")
        else:
            print("‚ùå √âchec r√©ception d'√©v√©nement")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test bus d'√©v√©nements: {e}")
        return False

def test_ui_controller():
    """Test du contr√¥leur UI"""
    print("\nüñ•Ô∏è TEST DU CONTR√îLEUR UI")
    print("=" * 30)
    
    try:
        from src.ui.ui_controller import UIController
        from src.utils.event_bus import EventBus
        
        event_bus = EventBus()
        config = {"ui": {"mode": "both"}}
        
        ui_controller = UIController(event_bus, config)
        print("‚úÖ Contr√¥leur UI initialis√©")
        
        # V√©rifier les services inject√©s
        if hasattr(ui_controller, 'persistence_service'):
            print("‚úÖ Service de persistance inject√©")
        else:
            print("‚ùå Service de persistance non inject√©")
        
        if hasattr(ui_controller, 'terrarium_service'):
            print("‚úÖ Service de terrariums inject√©")
        else:
            print("‚ùå Service de terrariums non inject√©")
        
        if hasattr(ui_controller, 'component_control_service'):
            print("‚úÖ Service de contr√¥le des composants inject√©")
        else:
            print("‚ùå Service de contr√¥le des composants non inject√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test contr√¥leur UI: {e}")
        return False

def test_main_loop():
    """Test de la boucle principale"""
    print("\nüîÑ TEST DE LA BOUCLE PRINCIPALE")
    print("=" * 40)
    
    try:
        from src.loops.main_loop import MainLoop
        from src.utils.event_bus import EventBus
        from src.services.safety_service import SafetyService
        
        event_bus = EventBus()
        safety_service = SafetyService(event_bus)
        main_loop = MainLoop(event_bus, safety_service)
        
        print("‚úÖ Boucle principale initialis√©e")
        
        # V√©rifier les composants de la boucle
        if hasattr(main_loop, 'control_service'):
            print("‚úÖ Service de contr√¥le pr√©sent")
        else:
            print("‚ùå Service de contr√¥le manquant")
        
        if hasattr(main_loop, 'config'):
            print("‚úÖ Configuration charg√©e")
        else:
            print("‚ùå Configuration manquante")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test boucle principale: {e}")
        return False

def test_controller_connections():
    """Test des connexions des contr√¥leurs"""
    print("\nüéõÔ∏è TEST DES CONNEXIONS DES CONTR√îLEURS")
    print("=" * 50)
    
    try:
        from src.controllers.main_controller import MainController
        from src.controllers.base_controller import ControllerConfig
        from src.utils.event_bus import EventBus
        
        event_bus = EventBus()
        config = ControllerConfig(
            name="main_controller",
            enabled=True,
            update_interval=1.0,
            auto_start=False
        )
        
        config_files = {
            "gpio_config": {},
            "safety_limits": {},
            "policies": {},
            "terrarium_config": {}
        }
        
        main_controller = MainController(config, config_files, event_bus)
        print("‚úÖ Contr√¥leur principal cr√©√©")
        
        # V√©rifier les sous-contr√¥leurs
        if hasattr(main_controller, 'sensor_controller'):
            print("‚úÖ Contr√¥leur de capteurs pr√©sent")
        else:
            print("‚ùå Contr√¥leur de capteurs manquant")
        
        if hasattr(main_controller, 'actuator_controller'):
            print("‚úÖ Contr√¥leur d'actionneurs pr√©sent")
        else:
            print("‚ùå Contr√¥leur d'actionneurs manquant")
        
        if hasattr(main_controller, 'device_controller'):
            print("‚úÖ Contr√¥leur de p√©riph√©riques pr√©sent")
        else:
            print("‚ùå Contr√¥leur de p√©riph√©riques manquant")
        
        # V√©rifier les contr√¥leurs sp√©cialis√©s
        if hasattr(main_controller, 'heater_controller'):
            print("‚úÖ Contr√¥leur de chauffage pr√©sent")
        else:
            print("‚ùå Contr√¥leur de chauffage manquant")
        
        if hasattr(main_controller, 'humidifier_controller'):
            print("‚úÖ Contr√¥leur d'humidification pr√©sent")
        else:
            print("‚ùå Contr√¥leur d'humidification manquant")
        
        if hasattr(main_controller, 'fan_controller'):
            print("‚úÖ Contr√¥leur de ventilation pr√©sent")
        else:
            print("‚ùå Contr√¥leur de ventilation manquant")
        
        if hasattr(main_controller, 'feeder_controller'):
            print("‚úÖ Contr√¥leur d'alimentation pr√©sent")
        else:
            print("‚ùå Contr√¥leur d'alimentation manquant")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test connexions contr√¥leurs: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üß™ TEST SIMPLE DES CONNEXIONS DES COMPOSANTS")
    print("=" * 60)
    
    tests = [
        test_imports,
        test_configuration_loading,
        test_event_bus,
        test_ui_controller,
        test_main_loop,
        test_controller_connections
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print()  # Ligne vide entre les tests
    
    print("üìä R√âSULTATS DES TESTS")
    print("=" * 30)
    print(f"Tests r√©ussis: {passed}/{total}")
    
    if passed == total:
        print("üéâ TOUS LES COMPOSANTS SONT BIEN CONNECT√âS !")
        print("L'architecture de l'application Alimante est coh√©rente.")
        return True
    else:
        print("‚ùå CERTAINS COMPOSANTS N√âCESSITENT UNE ATTENTION")
        print("V√©rifiez les erreurs ci-dessus pour corriger les probl√®mes.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
