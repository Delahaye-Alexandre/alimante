#!/usr/bin/env python3
"""
Alimante - Syst√®me de gestion automatique de terrariums
Point d'entr√©e principal de l'application
"""

import sys
import os
import logging
from pathlib import Path

# Ajouter le r√©pertoire src au path Python
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.loops.main_loop import MainLoop
from src.utils.event_bus import EventBus
from src.services.safety_service import SafetyService
from src.services.config_service import ConfigService
from src.services.camera_service import CameraService
from src.services.streaming_service import StreamingService
from src.services.snapshot_service import SnapshotService
from src.services.alert_service import AlertService
from src.services.monitoring_service import MonitoringService
from src.services.recovery_service import RecoveryService
from src.services.health_check_service import HealthCheckService
from src.ui.ui_controller import UIController

def setup_logging():
    """Configure le syst√®me de logging"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('alimante.log'),
            logging.StreamHandler()
        ]
    )

def main():
    """Fonction principale"""
    print("ü¶é Alimante - Syst√®me de gestion de terrariums")
    print("=" * 50)
    
    # Configuration du logging
    setup_logging()
    logger = logging.getLogger(__name__)
    
    try:
        # Chargement de la configuration
        import json
        config = {}
        try:
            with open('config/config.json', 'r') as f:
                config = json.load(f)
            logger.info("Configuration charg√©e")
        except Exception as e:
            logger.warning(f"Erreur chargement configuration: {e}")
            config = {}
        
        # Initialisation du bus d'√©v√©nements
        event_bus = EventBus()
        logger.info("Bus d'√©v√©nements initialis√©")
        
        # Initialisation du service de configuration
        config_service = ConfigService()
        all_configs = config_service.load_all_configs()
        logger.info("Service de configuration initialis√©")
        
        # Initialisation du service de s√©curit√©
        safety_service = SafetyService(event_bus)
        logger.info("Service de s√©curit√© initialis√©")
        
        # Initialisation des services de cam√©ra et streaming
        camera_service = CameraService(all_configs.get('main', {}), event_bus)
        if camera_service.initialize():
            logger.info("Service de cam√©ra initialis√©")
        else:
            logger.warning("√âchec initialisation service de cam√©ra")
        
        streaming_service = StreamingService(all_configs.get('main', {}), event_bus)
        if streaming_service.initialize():
            logger.info("Service de streaming initialis√©")
        else:
            logger.warning("√âchec initialisation service de streaming")
        
        snapshot_service = SnapshotService(all_configs.get('main', {}), event_bus)
        if snapshot_service.initialize():
            logger.info("Service de snapshots initialis√©")
        else:
            logger.warning("√âchec initialisation service de snapshots")
        
        alert_service = AlertService(all_configs.get('main', {}), event_bus)
        if alert_service.initialize():
            logger.info("Service d'alertes initialis√©")
        else:
            logger.warning("√âchec initialisation service d'alertes")
        
        # Initialisation des services de Phase 1 (gestion d'erreurs, monitoring, r√©cup√©ration)
        monitoring_service = MonitoringService(all_configs.get('main', {}), event_bus)
        if monitoring_service.initialize():
            logger.info("Service de monitoring initialis√©")
        else:
            logger.warning("√âchec initialisation service de monitoring")
        
        recovery_service = RecoveryService(all_configs.get('main', {}), event_bus)
        if recovery_service.initialize():
            logger.info("Service de r√©cup√©ration initialis√©")
        else:
            logger.warning("√âchec initialisation service de r√©cup√©ration")
        
        health_check_service = HealthCheckService(all_configs.get('main', {}), event_bus)
        if health_check_service.initialize():
            logger.info("Service de v√©rification de sant√© initialis√©")
        else:
            logger.warning("√âchec initialisation service de v√©rification de sant√©")
        
        # Initialiser l'interface utilisateur avec la configuration
        ui_controller = UIController(event_bus, config)
        logger.info("Contr√¥leur UI initialis√©")
        
        # D√©marrage de la boucle principale
        main_loop = MainLoop(event_bus, safety_service)
        logger.info("Boucle principale initialis√©e")
        
        # Connecter le service de persistance au MainController
        persistence_service = ui_controller.get_persistence_service()
        if persistence_service and hasattr(main_loop, 'main_controller') and main_loop.main_controller:
            main_loop.main_controller.persistence_service = persistence_service
            logger.info("Service de persistance connect√© au MainController")
        
        # D√©marrer les services de cam√©ra et streaming
        if camera_service.start():
            logger.info("Service de cam√©ra d√©marr√©")
        else:
            logger.warning("√âchec d√©marrage service de cam√©ra")
        
        if streaming_service.start():
            logger.info("Service de streaming d√©marr√©")
        else:
            logger.warning("√âchec d√©marrage service de streaming")
        
        if snapshot_service.start():
            logger.info("Service de snapshots d√©marr√©")
        else:
            logger.warning("√âchec d√©marrage service de snapshots")
        
        if alert_service.start():
            logger.info("Service d'alertes d√©marr√©")
        else:
            logger.warning("√âchec d√©marrage service d'alertes")
        
        # D√©marrer les services de Phase 1
        if monitoring_service.start():
            logger.info("Service de monitoring d√©marr√©")
        else:
            logger.warning("√âchec d√©marrage service de monitoring")
        
        if recovery_service.start():
            logger.info("Service de r√©cup√©ration d√©marr√©")
        else:
            logger.warning("√âchec d√©marrage service de r√©cup√©ration")
        
        if health_check_service.start():
            logger.info("Service de v√©rification de sant√© d√©marr√©")
        else:
            logger.warning("√âchec d√©marrage service de v√©rification de sant√©")
        
        # D√©marrer l'interface utilisateur
        if ui_controller.start():
            logger.info("Interface utilisateur d√©marr√©e")
        else:
            logger.warning("√âchec d√©marrage interface utilisateur")
        
        print("‚úÖ Syst√®me Alimante d√©marr√© avec succ√®s")
        print("üìä Surveillance du ou des terrariums en cours...")
        print("üåê Interface web disponible sur http://localhost:8080")
        print("üì∑ Services de cam√©ra et streaming actifs")
        print("üõë Appuyez sur Ctrl+C pour arr√™ter")
        
        # Lancement de la boucle principale
        main_loop.run()
        
    except KeyboardInterrupt:
        logger.info("Arr√™t demand√© par l'utilisateur")
        print("\nüõë Arr√™t du syst√®me Alimante")
        
    except Exception as e:
        logger.error(f"Erreur critique: {e}")
        print(f"‚ùå Erreur critique: {e}")
        sys.exit(1)
        
    finally:
        # Arr√™ter tous les services
        try:
            if 'ui_controller' in locals():
                ui_controller.stop()
                logger.info("Interface utilisateur arr√™t√©e")
        except Exception as e:
            logger.error(f"Erreur arr√™t interface utilisateur: {e}")
        
        try:
            if 'camera_service' in locals():
                camera_service.stop()
                logger.info("Service de cam√©ra arr√™t√©")
        except Exception as e:
            logger.error(f"Erreur arr√™t service de cam√©ra: {e}")
        
        try:
            if 'streaming_service' in locals():
                streaming_service.stop()
                logger.info("Service de streaming arr√™t√©")
        except Exception as e:
            logger.error(f"Erreur arr√™t service de streaming: {e}")
        
        try:
            if 'snapshot_service' in locals():
                snapshot_service.stop()
                logger.info("Service de snapshots arr√™t√©")
        except Exception as e:
            logger.error(f"Erreur arr√™t service de snapshots: {e}")
        
        try:
            if 'alert_service' in locals():
                alert_service.stop()
                logger.info("Service d'alertes arr√™t√©")
        except Exception as e:
            logger.error(f"Erreur arr√™t service d'alertes: {e}")
        
        # Arr√™ter les services de Phase 1
        try:
            if 'monitoring_service' in locals():
                monitoring_service.stop()
                logger.info("Service de monitoring arr√™t√©")
        except Exception as e:
            logger.error(f"Erreur arr√™t service de monitoring: {e}")
        
        try:
            if 'recovery_service' in locals():
                recovery_service.stop()
                logger.info("Service de r√©cup√©ration arr√™t√©")
        except Exception as e:
            logger.error(f"Erreur arr√™t service de r√©cup√©ration: {e}")
        
        try:
            if 'health_check_service' in locals():
                health_check_service.stop()
                logger.info("Service de v√©rification de sant√© arr√™t√©")
        except Exception as e:
            logger.error(f"Erreur arr√™t service de v√©rification de sant√©: {e}")
        
        logger.info("Arr√™t du syst√®me Alimante")
        print("üëã Au revoir !")

if __name__ == "__main__":
    main()
