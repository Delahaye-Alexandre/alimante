#!/usr/bin/env python3
"""
Test sp√©cifique pour l'√©cran PSI
Test des pins Reset, A0, SDA, SCL
"""

import RPi.GPIO as GPIO
import time
import sys
import signal
from datetime import datetime

class PSIDisplayTest:
    """Test pour l'√©cran PSI"""
    
    def __init__(self, reset_pin=24, a0_pin=25, sda_pin=10, scl_pin=11):
        """
        Initialise le test de l'√©cran PSI
        
        Args:
            reset_pin (int): Pin Reset de l'√©cran
            a0_pin (int): Pin A0 de l'√©cran
            sda_pin (int): Pin SDA (I2C) de l'√©cran
            scl_pin (int): Pin SCL (I2C) de l'√©cran
        """
        self.reset_pin = reset_pin
        self.a0_pin = a0_pin
        self.sda_pin = sda_pin
        self.scl_pin = scl_pin
        
        # Configuration GPIO
        GPIO.setmode(GPIO.BCM)
        GPIO.setwarnings(False)
        
        # Gestionnaire de signal
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        self.running = True
    
    def initialize(self):
        """Initialise les pins de l'√©cran PSI"""
        try:
            # Configuration des pins en sortie
            GPIO.setup(self.reset_pin, GPIO.OUT)
            GPIO.setup(self.a0_pin, GPIO.OUT)
            GPIO.setup(self.sda_pin, GPIO.OUT)
            GPIO.setup(self.scl_pin, GPIO.OUT)
            
            # √âtat initial
            GPIO.output(self.reset_pin, GPIO.HIGH)  # Reset actif bas
            GPIO.output(self.a0_pin, GPIO.LOW)      # A0 bas
            GPIO.output(self.sda_pin, GPIO.HIGH)    # SDA haut
            GPIO.output(self.scl_pin, GPIO.HIGH)    # SCL haut
            
            print("‚úÖ Pins √©cran PSI initialis√©s")
            return True
        except Exception as e:
            print(f"‚ùå Erreur initialisation: {e}")
            return False
    
    def test_reset_sequence(self):
        """Test de la s√©quence de reset"""
        print("üîÑ Test s√©quence de reset...")
        
        # Reset (actif bas)
        GPIO.output(self.reset_pin, GPIO.LOW)
        time.sleep(0.1)
        GPIO.output(self.reset_pin, GPIO.HIGH)
        time.sleep(0.1)
        
        print("‚úÖ S√©quence de reset termin√©e")
    
    def test_a0_control(self):
        """Test du contr√¥le A0"""
        print("üîÑ Test contr√¥le A0...")
        
        # A0 = 0 (commande)
        GPIO.output(self.a0_pin, GPIO.LOW)
        print("   A0 = 0 (mode commande)")
        time.sleep(0.5)
        
        # A0 = 1 (donn√©es)
        GPIO.output(self.a0_pin, GPIO.HIGH)
        print("   A0 = 1 (mode donn√©es)")
        time.sleep(0.5)
        
        # Retour √† 0
        GPIO.output(self.a0_pin, GPIO.LOW)
        print("‚úÖ Test contr√¥le A0 termin√©")
    
    def test_i2c_pins(self):
        """Test des pins I2C"""
        print("üîÑ Test pins I2C...")
        
        # Test SDA
        print("   Test SDA...")
        GPIO.output(self.sda_pin, GPIO.LOW)
        time.sleep(0.2)
        GPIO.output(self.sda_pin, GPIO.HIGH)
        time.sleep(0.2)
        
        # Test SCL
        print("   Test SCL...")
        GPIO.output(self.scl_pin, GPIO.LOW)
        time.sleep(0.2)
        GPIO.output(self.scl_pin, GPIO.HIGH)
        time.sleep(0.2)
        
        print("‚úÖ Test pins I2C termin√©")
    
    def test_i2c_sequence(self):
        """Test d'une s√©quence I2C simple"""
        print("üîÑ Test s√©quence I2C...")
        
        # Start condition
        GPIO.output(self.sda_pin, GPIO.HIGH)
        GPIO.output(self.scl_pin, GPIO.HIGH)
        time.sleep(0.1)
        GPIO.output(self.sda_pin, GPIO.LOW)
        time.sleep(0.1)
        GPIO.output(self.scl_pin, GPIO.LOW)
        time.sleep(0.1)
        
        # Quelques cycles de clock
        for i in range(8):
            GPIO.output(self.scl_pin, GPIO.HIGH)
            time.sleep(0.05)
            GPIO.output(self.scl_pin, GPIO.LOW)
            time.sleep(0.05)
        
        # Stop condition
        GPIO.output(self.sda_pin, GPIO.LOW)
        time.sleep(0.1)
        GPIO.output(self.scl_pin, GPIO.HIGH)
        time.sleep(0.1)
        GPIO.output(self.sda_pin, GPIO.HIGH)
        time.sleep(0.1)
        
        print("‚úÖ S√©quence I2C termin√©e")
    
    def run_complete_test(self):
        """Lance le test complet"""
        print("üöÄ D√©marrage du test √©cran PSI...")
        
        if not self.initialize():
            return
        
        print("\n" + "="*60)
        print("üñ•Ô∏è  TEST √âCRAN PSI - ALIMANTE")
        print("="*60)
        print(f"üìÖ {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        print(f"üîå Reset Pin: {self.reset_pin}")
        print(f"üîå A0 Pin: {self.a0_pin}")
        print(f"üîå SDA Pin: {self.sda_pin}")
        print(f"üîå SCL Pin: {self.scl_pin}")
        print("="*60)
        
        try:
            while self.running:
                print("\nüéõÔ∏è  MENU DE TEST:")
                print("1. Test s√©quence de reset")
                print("2. Test contr√¥le A0")
                print("3. Test pins I2C")
                print("4. Test s√©quence I2C")
                print("5. Test complet")
                print("0. Quitter")
                
                choice = input("\nVotre choix (0-5): ").strip()
                
                if choice == "0":
                    break
                elif choice == "1":
                    self.test_reset_sequence()
                elif choice == "2":
                    self.test_a0_control()
                elif choice == "3":
                    self.test_i2c_pins()
                elif choice == "4":
                    self.test_i2c_sequence()
                elif choice == "5":
                    print("üîÑ Test complet en cours...")
                    self.test_reset_sequence()
                    time.sleep(1)
                    self.test_a0_control()
                    time.sleep(1)
                    self.test_i2c_pins()
                    time.sleep(1)
                    self.test_i2c_sequence()
                    print("‚úÖ Test complet termin√©!")
                else:
                    print("‚ùå Choix invalide")
                
                time.sleep(1)
                
        except KeyboardInterrupt:
            print("\nüõë Arr√™t par l'utilisateur")
        finally:
            self.cleanup()
    
    def cleanup(self):
        """Nettoie les ressources"""
        GPIO.cleanup()
        print("üßπ Ressources nettoy√©es")
    
    def _signal_handler(self, signum, frame):
        """Gestionnaire de signal pour arr√™t propre"""
        print("\nüõë Arr√™t du test...")
        self.running = False
        self.cleanup()
        sys.exit(0)

def main():
    """Fonction principale"""
    print("=" * 70)
    print("üñ•Ô∏è  TEST √âCRAN PSI")
    print("üîß Test pins Reset, A0, SDA, SCL pour Alimante")
    print("=" * 70)
    
    # Configuration des pins (selon votre c√¢blage)
    RESET_PIN = 24  # Pin Reset de l'√©cran
    A0_PIN = 25     # Pin A0 de l'√©cran
    SDA_PIN = 10    # Pin SDA (I2C) de l'√©cran
    SCL_PIN = 11    # Pin SCL (I2C) de l'√©cran
    
    print(f"üîå Configuration GPIO:")
    print(f"   ‚Ä¢ Reset Pin: {RESET_PIN}")
    print(f"   ‚Ä¢ A0 Pin: {A0_PIN}")
    print(f"   ‚Ä¢ SDA Pin: {SDA_PIN}")
    print(f"   ‚Ä¢ SCL Pin: {SCL_PIN}")
    print()
    
    # Cr√©ation et lancement du test
    test = PSIDisplayTest(RESET_PIN, A0_PIN, SDA_PIN, SCL_PIN)
    
    try:
        test.run_complete_test()
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    finally:
        print("üëã Test termin√©!")

if __name__ == "__main__":
    main()
